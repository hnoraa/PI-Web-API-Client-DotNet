/* 
 * PI Web API 2016 R2 Swagger definition
 *
 * RESTful client for PI Web API 2016 R2
 *
 * OpenAPI spec version: v1
 * Contact: pidevclub@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OSIsoft.PIDevClub.PIWebApiClient.Client;
using OSIsoft.PIDevClub.PIWebApiClient.Model;

namespace OSIsoft.PIDevClub.PIWebApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates the template for the returned search results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <returns>PISearchFieldResults</returns>
        PISearchFieldResults Fields (int? count = null, int? start = null);

        /// <summary>
        /// Creates the template for the returned search results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <returns>ApiResponse of PISearchFieldResults</returns>
        ApiResponse<PISearchFieldResults> FieldsWithHttpInfo (int? count = null, int? start = null);
        /// <summary>
        /// Initiate a full crawl of a source database with the supplied name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of a search source to crawl, in the form of:                pi:piservername or af:\\\\afservername\\afdatabasename.              Otherwise a full crawl of all sources is triggered. (optional)</param>
        /// <returns>Object</returns>
        Object FullCrawl (string name = null);

        /// <summary>
        /// Initiate a full crawl of a source database with the supplied name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of a search source to crawl, in the form of:                pi:piservername or af:\\\\afservername\\afdatabasename.              Otherwise a full crawl of all sources is triggered. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FullCrawlWithHttpInfo (string name = null);
        /// <summary>
        /// Get the crawler settings for the search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PISearchCrawlerSettings</returns>
        PISearchCrawlerSettings GetSettings ();

        /// <summary>
        /// Get the crawler settings for the search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PISearchCrawlerSettings</returns>
        ApiResponse<PISearchCrawlerSettings> GetSettingsWithHttpInfo ();
        /// <summary>
        /// Get the version of the PI Web API Indexed Search service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PISystemVersion</returns>
        PISystemVersion GetVersion ();

        /// <summary>
        /// Get the version of the PI Web API Indexed Search service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PISystemVersion</returns>
        ApiResponse<PISystemVersion> GetVersionWithHttpInfo ();
        /// <summary>
        /// Get indexing information for current indexed sources of the PI Web API Indexed Search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> IndexInfo ();

        /// <summary>
        /// Get indexing information for current indexed sources of the PI Web API Indexed Search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> IndexInfoWithHttpInfo ();
        /// <summary>
        /// Get top level links for the PI Web API Indexed Search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PISearchSearchIndexPage</returns>
        PISearchSearchIndexPage Links ();

        /// <summary>
        /// Get top level links for the PI Web API Indexed Search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PISearchSearchIndexPage</returns>
        ApiResponse<PISearchSearchIndexPage> LinksWithHttpInfo ();
        /// <summary>
        /// Get query metrics for the PI Web API Indexed Search Service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        Dictionary<string, List<Object>> Metrics ();

        /// <summary>
        /// Get query metrics for the PI Web API Indexed Search Service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<Object>>> MetricsWithHttpInfo ();
        /// <summary>
        /// Query the crawled data by keyword(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">One or many terms, in the form of field:value, like \&quot;name:pump\&quot;.               If no field is specfied, like \&quot;pump\&quot;, then the following fields will all be used:               &amp;lt;strong&amp;gt;name, description, afcategories, afelementtemplate, attributename, attributedescription.&amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              The star and question mark wildcards are supported, for example: boil* or boi?er.               To perform a fuzzy search, append a tilde to the end of a keyword, like \&quot;boilr~\&quot; will match \&quot;boiler\&quot;. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              If multiple terms are entered, they are assumed to be &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;ed together.               If that&#39;s not appropriate, you can specify &amp;lt;strong&amp;gt;AND&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;, and               &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; operators, along with parenthesis to create a complex query.               For example \&quot;(vibration* AND datatype:float32) OR afelementtemplate:pump\&quot;  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              Special characters are used through the keyword syntax, so those characters must be escaped if they are in a literal search term.               The following characters must be escaped with a backslash:&amp;lt;br&amp;gt;&amp;lt;strong&amp;gt; + - &amp;amp;&amp;amp; || ! ( ) { } [ ] ^ \&quot; ~ * ? : \\ &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              For example, to find a PI point named SI:NUSO.ID specify \&quot;q&#x3D;name:SI\\:USO.ID\&quot; (optional)</param>
        /// <param name="scope">List of sources to execute the query against. Specify the sources in               string format (e.g. pi:mypidataarchive) or in webId format. Multiple scopes               (and with different formats) can be specified, separated by semicolons (;). (optional)</param>
        /// <param name="fields">List of fields to include in each Search Result. If no fields are specified, then the following fields are returned:               &amp;lt;strong&amp;gt;afcategory; attributes; datatype; description; endtime; haschildren; itemtype; links; matchedfields; name; plottable;               starttime; template; uniqueid; uom; webid &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              The following fields are not returned by default: &amp;lt;strong&amp;gt; paths; parents; explain &amp;lt;/strong&amp;gt; (must be paired with the links field) (optional)</param>
        /// <param name="count">Max number of results to return. The default is 10 per page. (optional)</param>
        /// <param name="start">Index of search result to begin with. The default is to start at index 0. (optional)</param>
        /// <returns>PISearchSearchResults</returns>
        PISearchSearchResults Query (string q = null, string scope = null, string fields = null, string count = null, string start = null);

        /// <summary>
        /// Query the crawled data by keyword(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">One or many terms, in the form of field:value, like \&quot;name:pump\&quot;.               If no field is specfied, like \&quot;pump\&quot;, then the following fields will all be used:               &amp;lt;strong&amp;gt;name, description, afcategories, afelementtemplate, attributename, attributedescription.&amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              The star and question mark wildcards are supported, for example: boil* or boi?er.               To perform a fuzzy search, append a tilde to the end of a keyword, like \&quot;boilr~\&quot; will match \&quot;boiler\&quot;. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              If multiple terms are entered, they are assumed to be &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;ed together.               If that&#39;s not appropriate, you can specify &amp;lt;strong&amp;gt;AND&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;, and               &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; operators, along with parenthesis to create a complex query.               For example \&quot;(vibration* AND datatype:float32) OR afelementtemplate:pump\&quot;  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              Special characters are used through the keyword syntax, so those characters must be escaped if they are in a literal search term.               The following characters must be escaped with a backslash:&amp;lt;br&amp;gt;&amp;lt;strong&amp;gt; + - &amp;amp;&amp;amp; || ! ( ) { } [ ] ^ \&quot; ~ * ? : \\ &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              For example, to find a PI point named SI:NUSO.ID specify \&quot;q&#x3D;name:SI\\:USO.ID\&quot; (optional)</param>
        /// <param name="scope">List of sources to execute the query against. Specify the sources in               string format (e.g. pi:mypidataarchive) or in webId format. Multiple scopes               (and with different formats) can be specified, separated by semicolons (;). (optional)</param>
        /// <param name="fields">List of fields to include in each Search Result. If no fields are specified, then the following fields are returned:               &amp;lt;strong&amp;gt;afcategory; attributes; datatype; description; endtime; haschildren; itemtype; links; matchedfields; name; plottable;               starttime; template; uniqueid; uom; webid &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              The following fields are not returned by default: &amp;lt;strong&amp;gt; paths; parents; explain &amp;lt;/strong&amp;gt; (must be paired with the links field) (optional)</param>
        /// <param name="count">Max number of results to return. The default is 10 per page. (optional)</param>
        /// <param name="start">Index of search result to begin with. The default is to start at index 0. (optional)</param>
        /// <returns>ApiResponse of PISearchSearchResults</returns>
        ApiResponse<PISearchSearchResults> QueryWithHttpInfo (string q = null, string scope = null, string fields = null, string count = null, string start = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates the template for the returned search results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <returns>Task of PISearchFieldResults</returns>
        System.Threading.Tasks.Task<PISearchFieldResults> FieldsAsync (int? count = null, int? start = null);

        /// <summary>
        /// Creates the template for the returned search results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <returns>Task of ApiResponse (PISearchFieldResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PISearchFieldResults>> FieldsAsyncWithHttpInfo (int? count = null, int? start = null);
        /// <summary>
        /// Initiate a full crawl of a source database with the supplied name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of a search source to crawl, in the form of:                pi:piservername or af:\\\\afservername\\afdatabasename.              Otherwise a full crawl of all sources is triggered. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FullCrawlAsync (string name = null);

        /// <summary>
        /// Initiate a full crawl of a source database with the supplied name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of a search source to crawl, in the form of:                pi:piservername or af:\\\\afservername\\afdatabasename.              Otherwise a full crawl of all sources is triggered. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FullCrawlAsyncWithHttpInfo (string name = null);
        /// <summary>
        /// Get the crawler settings for the search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PISearchCrawlerSettings</returns>
        System.Threading.Tasks.Task<PISearchCrawlerSettings> GetSettingsAsync ();

        /// <summary>
        /// Get the crawler settings for the search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PISearchCrawlerSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<PISearchCrawlerSettings>> GetSettingsAsyncWithHttpInfo ();
        /// <summary>
        /// Get the version of the PI Web API Indexed Search service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PISystemVersion</returns>
        System.Threading.Tasks.Task<PISystemVersion> GetVersionAsync ();

        /// <summary>
        /// Get the version of the PI Web API Indexed Search service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PISystemVersion)</returns>
        System.Threading.Tasks.Task<ApiResponse<PISystemVersion>> GetVersionAsyncWithHttpInfo ();
        /// <summary>
        /// Get indexing information for current indexed sources of the PI Web API Indexed Search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> IndexInfoAsync ();

        /// <summary>
        /// Get indexing information for current indexed sources of the PI Web API Indexed Search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> IndexInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Get top level links for the PI Web API Indexed Search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PISearchSearchIndexPage</returns>
        System.Threading.Tasks.Task<PISearchSearchIndexPage> LinksAsync ();

        /// <summary>
        /// Get top level links for the PI Web API Indexed Search service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PISearchSearchIndexPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PISearchSearchIndexPage>> LinksAsyncWithHttpInfo ();
        /// <summary>
        /// Get query metrics for the PI Web API Indexed Search Service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<Object>>> MetricsAsync ();

        /// <summary>
        /// Get query metrics for the PI Web API Indexed Search Service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;Object&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<Object>>>> MetricsAsyncWithHttpInfo ();
        /// <summary>
        /// Query the crawled data by keyword(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">One or many terms, in the form of field:value, like \&quot;name:pump\&quot;.               If no field is specfied, like \&quot;pump\&quot;, then the following fields will all be used:               &amp;lt;strong&amp;gt;name, description, afcategories, afelementtemplate, attributename, attributedescription.&amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              The star and question mark wildcards are supported, for example: boil* or boi?er.               To perform a fuzzy search, append a tilde to the end of a keyword, like \&quot;boilr~\&quot; will match \&quot;boiler\&quot;. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              If multiple terms are entered, they are assumed to be &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;ed together.               If that&#39;s not appropriate, you can specify &amp;lt;strong&amp;gt;AND&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;, and               &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; operators, along with parenthesis to create a complex query.               For example \&quot;(vibration* AND datatype:float32) OR afelementtemplate:pump\&quot;  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              Special characters are used through the keyword syntax, so those characters must be escaped if they are in a literal search term.               The following characters must be escaped with a backslash:&amp;lt;br&amp;gt;&amp;lt;strong&amp;gt; + - &amp;amp;&amp;amp; || ! ( ) { } [ ] ^ \&quot; ~ * ? : \\ &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              For example, to find a PI point named SI:NUSO.ID specify \&quot;q&#x3D;name:SI\\:USO.ID\&quot; (optional)</param>
        /// <param name="scope">List of sources to execute the query against. Specify the sources in               string format (e.g. pi:mypidataarchive) or in webId format. Multiple scopes               (and with different formats) can be specified, separated by semicolons (;). (optional)</param>
        /// <param name="fields">List of fields to include in each Search Result. If no fields are specified, then the following fields are returned:               &amp;lt;strong&amp;gt;afcategory; attributes; datatype; description; endtime; haschildren; itemtype; links; matchedfields; name; plottable;               starttime; template; uniqueid; uom; webid &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              The following fields are not returned by default: &amp;lt;strong&amp;gt; paths; parents; explain &amp;lt;/strong&amp;gt; (must be paired with the links field) (optional)</param>
        /// <param name="count">Max number of results to return. The default is 10 per page. (optional)</param>
        /// <param name="start">Index of search result to begin with. The default is to start at index 0. (optional)</param>
        /// <returns>Task of PISearchSearchResults</returns>
        System.Threading.Tasks.Task<PISearchSearchResults> QueryAsync (string q = null, string scope = null, string fields = null, string count = null, string start = null);

        /// <summary>
        /// Query the crawled data by keyword(s).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">One or many terms, in the form of field:value, like \&quot;name:pump\&quot;.               If no field is specfied, like \&quot;pump\&quot;, then the following fields will all be used:               &amp;lt;strong&amp;gt;name, description, afcategories, afelementtemplate, attributename, attributedescription.&amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              The star and question mark wildcards are supported, for example: boil* or boi?er.               To perform a fuzzy search, append a tilde to the end of a keyword, like \&quot;boilr~\&quot; will match \&quot;boiler\&quot;. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              If multiple terms are entered, they are assumed to be &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;ed together.               If that&#39;s not appropriate, you can specify &amp;lt;strong&amp;gt;AND&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;, and               &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; operators, along with parenthesis to create a complex query.               For example \&quot;(vibration* AND datatype:float32) OR afelementtemplate:pump\&quot;  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              Special characters are used through the keyword syntax, so those characters must be escaped if they are in a literal search term.               The following characters must be escaped with a backslash:&amp;lt;br&amp;gt;&amp;lt;strong&amp;gt; + - &amp;amp;&amp;amp; || ! ( ) { } [ ] ^ \&quot; ~ * ? : \\ &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              For example, to find a PI point named SI:NUSO.ID specify \&quot;q&#x3D;name:SI\\:USO.ID\&quot; (optional)</param>
        /// <param name="scope">List of sources to execute the query against. Specify the sources in               string format (e.g. pi:mypidataarchive) or in webId format. Multiple scopes               (and with different formats) can be specified, separated by semicolons (;). (optional)</param>
        /// <param name="fields">List of fields to include in each Search Result. If no fields are specified, then the following fields are returned:               &amp;lt;strong&amp;gt;afcategory; attributes; datatype; description; endtime; haschildren; itemtype; links; matchedfields; name; plottable;               starttime; template; uniqueid; uom; webid &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              The following fields are not returned by default: &amp;lt;strong&amp;gt; paths; parents; explain &amp;lt;/strong&amp;gt; (must be paired with the links field) (optional)</param>
        /// <param name="count">Max number of results to return. The default is 10 per page. (optional)</param>
        /// <param name="start">Index of search result to begin with. The default is to start at index 0. (optional)</param>
        /// <returns>Task of ApiResponse (PISearchSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PISearchSearchResults>> QueryAsyncWithHttpInfo (string q = null, string scope = null, string fields = null, string count = null, string start = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private OSIsoft.PIDevClub.PIWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = OSIsoft.PIDevClub.PIWebApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OSIsoft.PIDevClub.PIWebApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OSIsoft.PIDevClub.PIWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates the template for the returned search results. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <returns>PISearchFieldResults</returns>
        public PISearchFieldResults Fields (int? count = null, int? start = null)
        {
             ApiResponse<PISearchFieldResults> localVarResponse = FieldsWithHttpInfo(count, start);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates the template for the returned search results. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <returns>ApiResponse of PISearchFieldResults</returns>
        public ApiResponse< PISearchFieldResults > FieldsWithHttpInfo (int? count = null, int? start = null)
        {

            var localVarPath = "/search/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Fields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISearchFieldResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISearchFieldResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISearchFieldResults)));
            
        }

        /// <summary>
        /// Creates the template for the returned search results. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <returns>Task of PISearchFieldResults</returns>
        public async System.Threading.Tasks.Task<PISearchFieldResults> FieldsAsync (int? count = null, int? start = null)
        {
             ApiResponse<PISearchFieldResults> localVarResponse = await FieldsAsyncWithHttpInfo(count, start);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates the template for the returned search results. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count"> (optional)</param>
        /// <param name="start"> (optional)</param>
        /// <returns>Task of ApiResponse (PISearchFieldResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PISearchFieldResults>> FieldsAsyncWithHttpInfo (int? count = null, int? start = null)
        {

            var localVarPath = "/search/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Fields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISearchFieldResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISearchFieldResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISearchFieldResults)));
            
        }

        /// <summary>
        /// Initiate a full crawl of a source database with the supplied name. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of a search source to crawl, in the form of:                pi:piservername or af:\\\\afservername\\afdatabasename.              Otherwise a full crawl of all sources is triggered. (optional)</param>
        /// <returns>Object</returns>
        public Object FullCrawl (string name = null)
        {
             ApiResponse<Object> localVarResponse = FullCrawlWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a full crawl of a source database with the supplied name. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of a search source to crawl, in the form of:                pi:piservername or af:\\\\afservername\\afdatabasename.              Otherwise a full crawl of all sources is triggered. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > FullCrawlWithHttpInfo (string name = null)
        {

            var localVarPath = "/search/sources/crawl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FullCrawl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Initiate a full crawl of a source database with the supplied name. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of a search source to crawl, in the form of:                pi:piservername or af:\\\\afservername\\afdatabasename.              Otherwise a full crawl of all sources is triggered. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FullCrawlAsync (string name = null)
        {
             ApiResponse<Object> localVarResponse = await FullCrawlAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate a full crawl of a source database with the supplied name. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of a search source to crawl, in the form of:                pi:piservername or af:\\\\afservername\\afdatabasename.              Otherwise a full crawl of all sources is triggered. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FullCrawlAsyncWithHttpInfo (string name = null)
        {

            var localVarPath = "/search/sources/crawl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarQueryParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FullCrawl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get the crawler settings for the search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PISearchCrawlerSettings</returns>
        public PISearchCrawlerSettings GetSettings ()
        {
             ApiResponse<PISearchCrawlerSettings> localVarResponse = GetSettingsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the crawler settings for the search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PISearchCrawlerSettings</returns>
        public ApiResponse< PISearchCrawlerSettings > GetSettingsWithHttpInfo ()
        {

            var localVarPath = "/search/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISearchCrawlerSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISearchCrawlerSettings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISearchCrawlerSettings)));
            
        }

        /// <summary>
        /// Get the crawler settings for the search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PISearchCrawlerSettings</returns>
        public async System.Threading.Tasks.Task<PISearchCrawlerSettings> GetSettingsAsync ()
        {
             ApiResponse<PISearchCrawlerSettings> localVarResponse = await GetSettingsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the crawler settings for the search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PISearchCrawlerSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PISearchCrawlerSettings>> GetSettingsAsyncWithHttpInfo ()
        {

            var localVarPath = "/search/settings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISearchCrawlerSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISearchCrawlerSettings) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISearchCrawlerSettings)));
            
        }

        /// <summary>
        /// Get the version of the PI Web API Indexed Search service 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PISystemVersion</returns>
        public PISystemVersion GetVersion ()
        {
             ApiResponse<PISystemVersion> localVarResponse = GetVersionWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the version of the PI Web API Indexed Search service 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PISystemVersion</returns>
        public ApiResponse< PISystemVersion > GetVersionWithHttpInfo ()
        {

            var localVarPath = "/search/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISystemVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISystemVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISystemVersion)));
            
        }

        /// <summary>
        /// Get the version of the PI Web API Indexed Search service 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PISystemVersion</returns>
        public async System.Threading.Tasks.Task<PISystemVersion> GetVersionAsync ()
        {
             ApiResponse<PISystemVersion> localVarResponse = await GetVersionAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the version of the PI Web API Indexed Search service 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PISystemVersion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PISystemVersion>> GetVersionAsyncWithHttpInfo ()
        {

            var localVarPath = "/search/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISystemVersion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISystemVersion) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISystemVersion)));
            
        }

        /// <summary>
        /// Get indexing information for current indexed sources of the PI Web API Indexed Search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> IndexInfo ()
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = IndexInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get indexing information for current indexed sources of the PI Web API Indexed Search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse< Dictionary<string, string> > IndexInfoWithHttpInfo ()
        {

            var localVarPath = "/search/serviceinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            
        }

        /// <summary>
        /// Get indexing information for current indexed sources of the PI Web API Indexed Search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> IndexInfoAsync ()
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = await IndexInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get indexing information for current indexed sources of the PI Web API Indexed Search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> IndexInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/search/serviceinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IndexInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            
        }

        /// <summary>
        /// Get top level links for the PI Web API Indexed Search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PISearchSearchIndexPage</returns>
        public PISearchSearchIndexPage Links ()
        {
             ApiResponse<PISearchSearchIndexPage> localVarResponse = LinksWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get top level links for the PI Web API Indexed Search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PISearchSearchIndexPage</returns>
        public ApiResponse< PISearchSearchIndexPage > LinksWithHttpInfo ()
        {

            var localVarPath = "/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Links", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISearchSearchIndexPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISearchSearchIndexPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISearchSearchIndexPage)));
            
        }

        /// <summary>
        /// Get top level links for the PI Web API Indexed Search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PISearchSearchIndexPage</returns>
        public async System.Threading.Tasks.Task<PISearchSearchIndexPage> LinksAsync ()
        {
             ApiResponse<PISearchSearchIndexPage> localVarResponse = await LinksAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get top level links for the PI Web API Indexed Search service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PISearchSearchIndexPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PISearchSearchIndexPage>> LinksAsyncWithHttpInfo ()
        {

            var localVarPath = "/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Links", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISearchSearchIndexPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISearchSearchIndexPage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISearchSearchIndexPage)));
            
        }

        /// <summary>
        /// Get query metrics for the PI Web API Indexed Search Service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        public Dictionary<string, List<Object>> Metrics ()
        {
             ApiResponse<Dictionary<string, List<Object>>> localVarResponse = MetricsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get query metrics for the PI Web API Indexed Search Service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        public ApiResponse< Dictionary<string, List<Object>> > MetricsWithHttpInfo ()
        {

            var localVarPath = "/search/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Metrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, List<Object>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, List<Object>>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, List<Object>>)));
            
        }

        /// <summary>
        /// Get query metrics for the PI Web API Indexed Search Service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, List&lt;Object&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<Object>>> MetricsAsync ()
        {
             ApiResponse<Dictionary<string, List<Object>>> localVarResponse = await MetricsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get query metrics for the PI Web API Indexed Search Service. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;Object&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<Object>>>> MetricsAsyncWithHttpInfo ()
        {

            var localVarPath = "/search/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Metrics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, List<Object>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, List<Object>>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, List<Object>>)));
            
        }

        /// <summary>
        /// Query the crawled data by keyword(s). 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">One or many terms, in the form of field:value, like \&quot;name:pump\&quot;.               If no field is specfied, like \&quot;pump\&quot;, then the following fields will all be used:               &amp;lt;strong&amp;gt;name, description, afcategories, afelementtemplate, attributename, attributedescription.&amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              The star and question mark wildcards are supported, for example: boil* or boi?er.               To perform a fuzzy search, append a tilde to the end of a keyword, like \&quot;boilr~\&quot; will match \&quot;boiler\&quot;. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              If multiple terms are entered, they are assumed to be &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;ed together.               If that&#39;s not appropriate, you can specify &amp;lt;strong&amp;gt;AND&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;, and               &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; operators, along with parenthesis to create a complex query.               For example \&quot;(vibration* AND datatype:float32) OR afelementtemplate:pump\&quot;  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              Special characters are used through the keyword syntax, so those characters must be escaped if they are in a literal search term.               The following characters must be escaped with a backslash:&amp;lt;br&amp;gt;&amp;lt;strong&amp;gt; + - &amp;amp;&amp;amp; || ! ( ) { } [ ] ^ \&quot; ~ * ? : \\ &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              For example, to find a PI point named SI:NUSO.ID specify \&quot;q&#x3D;name:SI\\:USO.ID\&quot; (optional)</param>
        /// <param name="scope">List of sources to execute the query against. Specify the sources in               string format (e.g. pi:mypidataarchive) or in webId format. Multiple scopes               (and with different formats) can be specified, separated by semicolons (;). (optional)</param>
        /// <param name="fields">List of fields to include in each Search Result. If no fields are specified, then the following fields are returned:               &amp;lt;strong&amp;gt;afcategory; attributes; datatype; description; endtime; haschildren; itemtype; links; matchedfields; name; plottable;               starttime; template; uniqueid; uom; webid &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              The following fields are not returned by default: &amp;lt;strong&amp;gt; paths; parents; explain &amp;lt;/strong&amp;gt; (must be paired with the links field) (optional)</param>
        /// <param name="count">Max number of results to return. The default is 10 per page. (optional)</param>
        /// <param name="start">Index of search result to begin with. The default is to start at index 0. (optional)</param>
        /// <returns>PISearchSearchResults</returns>
        public PISearchSearchResults Query (string q = null, string scope = null, string fields = null, string count = null, string start = null)
        {
             ApiResponse<PISearchSearchResults> localVarResponse = QueryWithHttpInfo(q, scope, fields, count, start);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query the crawled data by keyword(s). 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">One or many terms, in the form of field:value, like \&quot;name:pump\&quot;.               If no field is specfied, like \&quot;pump\&quot;, then the following fields will all be used:               &amp;lt;strong&amp;gt;name, description, afcategories, afelementtemplate, attributename, attributedescription.&amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              The star and question mark wildcards are supported, for example: boil* or boi?er.               To perform a fuzzy search, append a tilde to the end of a keyword, like \&quot;boilr~\&quot; will match \&quot;boiler\&quot;. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              If multiple terms are entered, they are assumed to be &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;ed together.               If that&#39;s not appropriate, you can specify &amp;lt;strong&amp;gt;AND&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;, and               &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; operators, along with parenthesis to create a complex query.               For example \&quot;(vibration* AND datatype:float32) OR afelementtemplate:pump\&quot;  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              Special characters are used through the keyword syntax, so those characters must be escaped if they are in a literal search term.               The following characters must be escaped with a backslash:&amp;lt;br&amp;gt;&amp;lt;strong&amp;gt; + - &amp;amp;&amp;amp; || ! ( ) { } [ ] ^ \&quot; ~ * ? : \\ &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              For example, to find a PI point named SI:NUSO.ID specify \&quot;q&#x3D;name:SI\\:USO.ID\&quot; (optional)</param>
        /// <param name="scope">List of sources to execute the query against. Specify the sources in               string format (e.g. pi:mypidataarchive) or in webId format. Multiple scopes               (and with different formats) can be specified, separated by semicolons (;). (optional)</param>
        /// <param name="fields">List of fields to include in each Search Result. If no fields are specified, then the following fields are returned:               &amp;lt;strong&amp;gt;afcategory; attributes; datatype; description; endtime; haschildren; itemtype; links; matchedfields; name; plottable;               starttime; template; uniqueid; uom; webid &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              The following fields are not returned by default: &amp;lt;strong&amp;gt; paths; parents; explain &amp;lt;/strong&amp;gt; (must be paired with the links field) (optional)</param>
        /// <param name="count">Max number of results to return. The default is 10 per page. (optional)</param>
        /// <param name="start">Index of search result to begin with. The default is to start at index 0. (optional)</param>
        /// <returns>ApiResponse of PISearchSearchResults</returns>
        public ApiResponse< PISearchSearchResults > QueryWithHttpInfo (string q = null, string scope = null, string fields = null, string count = null, string start = null)
        {

            var localVarPath = "/search/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (scope != null) localVarQueryParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Query", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISearchSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISearchSearchResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISearchSearchResults)));
            
        }

        /// <summary>
        /// Query the crawled data by keyword(s). 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">One or many terms, in the form of field:value, like \&quot;name:pump\&quot;.               If no field is specfied, like \&quot;pump\&quot;, then the following fields will all be used:               &amp;lt;strong&amp;gt;name, description, afcategories, afelementtemplate, attributename, attributedescription.&amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              The star and question mark wildcards are supported, for example: boil* or boi?er.               To perform a fuzzy search, append a tilde to the end of a keyword, like \&quot;boilr~\&quot; will match \&quot;boiler\&quot;. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              If multiple terms are entered, they are assumed to be &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;ed together.               If that&#39;s not appropriate, you can specify &amp;lt;strong&amp;gt;AND&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;, and               &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; operators, along with parenthesis to create a complex query.               For example \&quot;(vibration* AND datatype:float32) OR afelementtemplate:pump\&quot;  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              Special characters are used through the keyword syntax, so those characters must be escaped if they are in a literal search term.               The following characters must be escaped with a backslash:&amp;lt;br&amp;gt;&amp;lt;strong&amp;gt; + - &amp;amp;&amp;amp; || ! ( ) { } [ ] ^ \&quot; ~ * ? : \\ &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              For example, to find a PI point named SI:NUSO.ID specify \&quot;q&#x3D;name:SI\\:USO.ID\&quot; (optional)</param>
        /// <param name="scope">List of sources to execute the query against. Specify the sources in               string format (e.g. pi:mypidataarchive) or in webId format. Multiple scopes               (and with different formats) can be specified, separated by semicolons (;). (optional)</param>
        /// <param name="fields">List of fields to include in each Search Result. If no fields are specified, then the following fields are returned:               &amp;lt;strong&amp;gt;afcategory; attributes; datatype; description; endtime; haschildren; itemtype; links; matchedfields; name; plottable;               starttime; template; uniqueid; uom; webid &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              The following fields are not returned by default: &amp;lt;strong&amp;gt; paths; parents; explain &amp;lt;/strong&amp;gt; (must be paired with the links field) (optional)</param>
        /// <param name="count">Max number of results to return. The default is 10 per page. (optional)</param>
        /// <param name="start">Index of search result to begin with. The default is to start at index 0. (optional)</param>
        /// <returns>Task of PISearchSearchResults</returns>
        public async System.Threading.Tasks.Task<PISearchSearchResults> QueryAsync (string q = null, string scope = null, string fields = null, string count = null, string start = null)
        {
             ApiResponse<PISearchSearchResults> localVarResponse = await QueryAsyncWithHttpInfo(q, scope, fields, count, start);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query the crawled data by keyword(s). 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">One or many terms, in the form of field:value, like \&quot;name:pump\&quot;.               If no field is specfied, like \&quot;pump\&quot;, then the following fields will all be used:               &amp;lt;strong&amp;gt;name, description, afcategories, afelementtemplate, attributename, attributedescription.&amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              The star and question mark wildcards are supported, for example: boil* or boi?er.               To perform a fuzzy search, append a tilde to the end of a keyword, like \&quot;boilr~\&quot; will match \&quot;boiler\&quot;. &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              If multiple terms are entered, they are assumed to be &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;ed together.               If that&#39;s not appropriate, you can specify &amp;lt;strong&amp;gt;AND&amp;lt;/strong&amp;gt;, &amp;lt;strong&amp;gt;OR&amp;lt;/strong&amp;gt;, and               &amp;lt;strong&amp;gt;NOT&amp;lt;/strong&amp;gt; operators, along with parenthesis to create a complex query.               For example \&quot;(vibration* AND datatype:float32) OR afelementtemplate:pump\&quot;  &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;              Special characters are used through the keyword syntax, so those characters must be escaped if they are in a literal search term.               The following characters must be escaped with a backslash:&amp;lt;br&amp;gt;&amp;lt;strong&amp;gt; + - &amp;amp;&amp;amp; || ! ( ) { } [ ] ^ \&quot; ~ * ? : \\ &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              For example, to find a PI point named SI:NUSO.ID specify \&quot;q&#x3D;name:SI\\:USO.ID\&quot; (optional)</param>
        /// <param name="scope">List of sources to execute the query against. Specify the sources in               string format (e.g. pi:mypidataarchive) or in webId format. Multiple scopes               (and with different formats) can be specified, separated by semicolons (;). (optional)</param>
        /// <param name="fields">List of fields to include in each Search Result. If no fields are specified, then the following fields are returned:               &amp;lt;strong&amp;gt;afcategory; attributes; datatype; description; endtime; haschildren; itemtype; links; matchedfields; name; plottable;               starttime; template; uniqueid; uom; webid &amp;lt;/strong&amp;gt; &amp;lt;br&amp;gt;              The following fields are not returned by default: &amp;lt;strong&amp;gt; paths; parents; explain &amp;lt;/strong&amp;gt; (must be paired with the links field) (optional)</param>
        /// <param name="count">Max number of results to return. The default is 10 per page. (optional)</param>
        /// <param name="start">Index of search result to begin with. The default is to start at index 0. (optional)</param>
        /// <returns>Task of ApiResponse (PISearchSearchResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PISearchSearchResults>> QueryAsyncWithHttpInfo (string q = null, string scope = null, string fields = null, string count = null, string start = null)
        {

            var localVarPath = "/search/query";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (scope != null) localVarQueryParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // query parameter
            if (fields != null) localVarQueryParams.Add("fields", Configuration.ApiClient.ParameterToString(fields)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Query", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISearchSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISearchSearchResults) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISearchSearchResults)));
            
        }

    }
}
