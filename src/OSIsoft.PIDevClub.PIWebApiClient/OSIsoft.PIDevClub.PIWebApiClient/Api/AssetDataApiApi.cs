/* 
 * PI Web API 2016 R2 Swagger definition
 *
 * RESTful client for PI Web API 2016 R2
 *
 * OpenAPI spec version: v1
 * Contact: pidevclub@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using OSIsoft.PIDevClub.PIWebApiClient.Client;
using OSIsoft.PIDevClub.PIWebApiClient.Model;

namespace OSIsoft.PIDevClub.PIWebApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetDataApiApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a reference to an existing element to the specified database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be added to.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referenceType">The name of the reference type between the parent and the referenced element.  This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;.  &lt;see topic&#x3D;\&quot;Reference Type\&quot; /&gt; (optional)</param>
        /// <returns>Object</returns>
        Object AddReferencedElement (string webId, List<string> referencedElementWebId, string referenceType = null);

        /// <summary>
        /// Add a reference to an existing element to the specified database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be added to.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referenceType">The name of the reference type between the parent and the referenced element.  This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;.  &lt;see topic&#x3D;\&quot;Reference Type\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddReferencedElementWithHttpInfo (string webId, List<string> referencedElementWebId, string referenceType = null);
        /// <summary>
        /// Create an analysis category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="analysisCategory">The new analysis category definition.</param>
        /// <returns>Object</returns>
        Object CreateAnalysisCategory (string webId, PICategory analysisCategory);

        /// <summary>
        /// Create an analysis category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="analysisCategory">The new analysis category definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateAnalysisCategoryWithHttpInfo (string webId, PICategory analysisCategory);
        /// <summary>
        /// Create an analysis template at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// Analyses that are based on an analysis template will inherit characteristics defined in the template.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new analysis template definition.</param>
        /// <returns>Object</returns>
        Object CreateAnalysisTemplate (string webId, PIAnalysisTemplate template);

        /// <summary>
        /// Create an analysis template at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// Analyses that are based on an analysis template will inherit characteristics defined in the template.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new analysis template definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateAnalysisTemplateWithHttpInfo (string webId, PIAnalysisTemplate template);
        /// <summary>
        /// Create an attribute category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the attribute category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="attributeCategory">The new attribute category definition.</param>
        /// <returns>Object</returns>
        Object CreateAttributeCategory (string webId, PICategory attributeCategory);

        /// <summary>
        /// Create an attribute category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the attribute category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="attributeCategory">The new attribute category definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateAttributeCategoryWithHttpInfo (string webId, PICategory attributeCategory);
        /// <summary>
        /// Create a child element.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database on which to create the element.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="element">The new element definition.</param>
        /// <returns>Object</returns>
        Object CreateElement (string webId, PIElement element);

        /// <summary>
        /// Create a child element.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database on which to create the element.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="element">The new element definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateElementWithHttpInfo (string webId, PIElement element);
        /// <summary>
        /// Create an element category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementCategory">The new element category definition.</param>
        /// <returns>Object</returns>
        Object CreateElementCategory (string webId, PICategory elementCategory);

        /// <summary>
        /// Create an element category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementCategory">The new element category definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateElementCategoryWithHttpInfo (string webId, PICategory elementCategory);
        /// <summary>
        /// Create a &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;template&lt;/see&gt; at the Asset Database root.  Specify InstanceType of \&quot;Element\&quot; or \&quot;EventFrame\&quot; to create element or event frame  template respectively. Only these two types of templates can be created.
        /// </summary>
        /// <remarks>
        /// Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new element template definition.</param>
        /// <returns>Object</returns>
        Object CreateElementTemplate (string webId, PIElementTemplate template);

        /// <summary>
        /// Create a &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;template&lt;/see&gt; at the Asset Database root.  Specify InstanceType of \&quot;Element\&quot; or \&quot;EventFrame\&quot; to create element or event frame  template respectively. Only these two types of templates can be created.
        /// </summary>
        /// <remarks>
        /// Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new element template definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateElementTemplateWithHttpInfo (string webId, PIElementTemplate template);
        /// <summary>
        /// Create an &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration&lt;/see&gt; set at the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the enumeration set.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="enumerationSet">The new enumeration set definition.</param>
        /// <returns>Object</returns>
        Object CreateEnumerationSet (string webId, PIEnumerationSet enumerationSet);

        /// <summary>
        /// Create an &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration&lt;/see&gt; set at the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the enumeration set.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="enumerationSet">The new enumeration set definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateEnumerationSetWithHttpInfo (string webId, PIEnumerationSet enumerationSet);
        /// <summary>
        /// Create an event frame.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database on which to create the event frame.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="eventFrame">The new event frame definition.</param>
        /// <returns>Object</returns>
        Object CreateEventFrame (string webId, PIEventFrame eventFrame);

        /// <summary>
        /// Create an event frame.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database on which to create the event frame.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="eventFrame">The new event frame definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateEventFrameWithHttpInfo (string webId, PIEventFrame eventFrame);
        /// <summary>
        /// Create a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be created.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityEntry">The new security entry definition.  The full list of allow and deny rights must be supplied.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be created.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be created.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Object</returns>
        Object CreateSecurityEntry (string webId, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null);

        /// <summary>
        /// Create a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be created.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityEntry">The new security entry definition.  The full list of allow and deny rights must be supplied.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be created.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be created.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateSecurityEntryWithHttpInfo (string webId, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null);
        /// <summary>
        /// Create a table on the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="table">The new table definition.</param>
        /// <returns>Object</returns>
        Object CreateTable (string webId, PITable table);

        /// <summary>
        /// Create a table on the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="table">The new table definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateTableWithHttpInfo (string webId, PITable table);
        /// <summary>
        /// Create a table category on the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="tableCategory">The new table category definition.</param>
        /// <returns>Object</returns>
        Object CreateTableCategory (string webId, PICategory tableCategory);

        /// <summary>
        /// Create a table category on the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="tableCategory">The new table category definition.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CreateTableCategoryWithHttpInfo (string webId, PICategory tableCategory);
        /// <summary>
        /// Delete an asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Object</returns>
        Object Delete (string webId);

        /// <summary>
        /// Delete an asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string webId);
        /// <summary>
        /// Delete a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be deleted.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries to be deleted.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be deleted.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Object</returns>
        Object DeleteSecurityEntry (string webId, string name, string securityItem = null, bool? applyToChildren = null);

        /// <summary>
        /// Delete a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be deleted.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries to be deleted.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be deleted.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteSecurityEntryWithHttpInfo (string webId, string name, string securityItem = null, bool? applyToChildren = null);
        /// <summary>
        /// Export the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="exportMode">Indicates the type of export to perform. The default is &#39;StrongReferences&#39;.  Multiple export modes may be specified by using multiple instances of exportMode.  &lt;see topic&#x3D;\&quot;Export Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*-30d&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <returns>Object</returns>
        Object Export (string webId, List<string> exportMode = null, string startTime = null, string endTime = null);

        /// <summary>
        /// Export the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="exportMode">Indicates the type of export to perform. The default is &#39;StrongReferences&#39;.  Multiple export modes may be specified by using multiple instances of exportMode.  &lt;see topic&#x3D;\&quot;Export Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*-30d&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ExportWithHttpInfo (string webId, List<string> exportMode = null, string startTime = null, string endTime = null);
        /// <summary>
        /// Retrieve analyses based on the specified conditions.
        /// </summary>
        /// <remarks>
        /// Users can search for the analyses based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the  analyses that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search for the analyses.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding analyses. The default is null.  &lt;see topic&#x3D;\&quot;Query String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsAnalysis</returns>
        PIItemsAnalysis FindAnalyses (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve analyses based on the specified conditions.
        /// </summary>
        /// <remarks>
        /// Users can search for the analyses based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the  analyses that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search for the analyses.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding analyses. The default is null.  &lt;see topic&#x3D;\&quot;Query String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsAnalysis</returns>
        ApiResponse<PIItemsAnalysis> FindAnalysesWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieves a list of element attributes matching the specified filters from the specified asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementNameFilter">The element name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementDescriptionFilter">The element description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="elementTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)</param>
        /// <param name="elementType">Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsAttribute</returns>
        PIItemsAttribute FindElementAttributes (string webId, string elementNameFilter = null, string elementDescriptionFilter = null, string elementCategory = null, string elementTemplate = null, string elementType = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieves a list of element attributes matching the specified filters from the specified asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementNameFilter">The element name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementDescriptionFilter">The element description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="elementTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)</param>
        /// <param name="elementType">Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsAttribute</returns>
        ApiResponse<PIItemsAttribute> FindElementAttributesWithHttpInfo (string webId, string elementNameFilter = null, string elementDescriptionFilter = null, string elementCategory = null, string elementTemplate = null, string elementType = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated when searching for event frames.          The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">A string representing the earliest starting time for the event frames to be matched.   startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">A string representing the latest ending time for the event frames to be matched.   The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameNameFilter">The event frame name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameDescriptionFilter">The event frame description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="eventFrameTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template.  The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsAttribute</returns>
        PIItemsAttribute FindEventFrameAttributes (string webId, string searchMode = null, string startTime = null, string endTime = null, string eventFrameNameFilter = null, string eventFrameDescriptionFilter = null, string referencedElementNameFilter = null, string eventFrameCategory = null, string eventFrameTemplate = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated when searching for event frames.          The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">A string representing the earliest starting time for the event frames to be matched.   startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">A string representing the latest ending time for the event frames to be matched.   The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameNameFilter">The event frame name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameDescriptionFilter">The event frame description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="eventFrameTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template.  The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsAttribute</returns>
        ApiResponse<PIItemsAttribute> FindEventFrameAttributesWithHttpInfo (string webId, string searchMode = null, string startTime = null, string endTime = null, string eventFrameNameFilter = null, string eventFrameDescriptionFilter = null, string referencedElementNameFilter = null, string eventFrameCategory = null, string eventFrameTemplate = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve an Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIAssetDatabase</returns>
        PIAssetDatabase Get (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve an Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIAssetDatabase</returns>
        ApiResponse<PIAssetDatabase> GetWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve analysis categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsCategory</returns>
        PIItemsCategory GetAnalysisCategories (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve analysis categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsCategory</returns>
        ApiResponse<PIItemsCategory> GetAnalysisCategoriesWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.AnalysisTemplateController\&quot;&gt;analysis templates&lt;/see&gt; based on the specified criteria.  By default, all analysis templates in the specified Asset Database are returned.
        /// </summary>
        /// <remarks>
        /// Users can search for the analysis templates based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsAnalysisTemplate</returns>
        PIItemsAnalysisTemplate GetAnalysisTemplates (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.AnalysisTemplateController\&quot;&gt;analysis templates&lt;/see&gt; based on the specified criteria.  By default, all analysis templates in the specified Asset Database are returned.
        /// </summary>
        /// <remarks>
        /// Users can search for the analysis templates based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsAnalysisTemplate</returns>
        ApiResponse<PIItemsAnalysisTemplate> GetAnalysisTemplatesWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve attribute categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsCategory</returns>
        PIItemsCategory GetAttributeCategories (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve attribute categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsCategory</returns>
        ApiResponse<PIItemsCategory> GetAttributeCategoriesWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve an Asset Database by path.
        /// </summary>
        /// <remarks>
        /// This method returns an asset database based on the hierarchical path associated with it, and should be used when a path  has been received from a separate part of the PI System for use in the PI Web API.  Users should primarily search  with the WebID when available.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the database. &lt;see topic&#x3D;\&quot;Path-Syntax\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIAssetDatabase</returns>
        PIAssetDatabase GetByPath (string path, string selectedFields = null);

        /// <summary>
        /// Retrieve an Asset Database by path.
        /// </summary>
        /// <remarks>
        /// This method returns an asset database based on the hierarchical path associated with it, and should be used when a path  has been received from a separate part of the PI System for use in the PI Web API.  Users should primarily search  with the WebID when available.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the database. &lt;see topic&#x3D;\&quot;Path-Syntax\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIAssetDatabase</returns>
        ApiResponse<PIAssetDatabase> GetByPathWithHttpInfo (string path, string selectedFields = null);
        /// <summary>
        /// Retrieve element categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsCategory</returns>
        PIItemsCategory GetElementCategories (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve element categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsCategory</returns>
        ApiResponse<PIItemsCategory> GetElementCategoriesWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;element templates&lt;/see&gt; based on the specified criteria.  Only templates of instance type \&quot;Element\&quot; and \&quot;EventFrame\&quot; are returned.  By default, all element and event frame templates in the specified Asset Database are returned.
        /// </summary>
        /// <remarks>
        /// Users can search for the element and event frame template based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsElementTemplate</returns>
        PIItemsElementTemplate GetElementTemplates (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;element templates&lt;/see&gt; based on the specified criteria.  Only templates of instance type \&quot;Element\&quot; and \&quot;EventFrame\&quot; are returned.  By default, all element and event frame templates in the specified Asset Database are returned.
        /// </summary>
        /// <remarks>
        /// Users can search for the element and event frame template based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsElementTemplate</returns>
        ApiResponse<PIItemsElementTemplate> GetElementTemplatesWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve elements based on the specified conditions.  By default, this method selects immediate children of the specified asset database.
        /// </summary>
        /// <remarks>
        /// Users can search for the elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than the immediate children of the searchRoot.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsElement</returns>
        PIItemsElement GetElements (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve elements based on the specified conditions.  By default, this method selects immediate children of the specified asset database.
        /// </summary>
        /// <remarks>
        /// Users can search for the elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than the immediate children of the searchRoot.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsElement</returns>
        ApiResponse<PIItemsElement> GetElementsWithHttpInfo (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration sets&lt;/see&gt; for given asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsEnumerationSet</returns>
        PIItemsEnumerationSet GetEnumerationSets (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration sets&lt;/see&gt; for given asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsEnumerationSet</returns>
        ApiResponse<PIItemsEnumerationSet> GetEnumerationSetsWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve event frames based on the specified conditions. By default, returns  all children of the specified root resource with a start time in the past 8 hours.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated  when searching for event frame objects to be included in the returned collection.  If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of  endTime, sortField, or sortOrder may be specified.  The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The starting time for the search. startTime must be less than or equal to the  endTime. The searchMode parameter will control whether the  comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The ending time for the search. The endTime must be greater than or equal to  the startTime. The searchMode parameter will control whether  the comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*&#39; if searchMode is not one of the  &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for finding event frames. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned event frames must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned event frames must have this template or a template derived from this template.  The default is no template filter. Specify this parameter by name. (optional)</param>
        /// <param name="referencedElementTemplateName">Specify that returned event frames must have an element in the event frame&#39;s referenced elements  collection that derives from the template. Specify this parameter by name. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies whether the search should include objects nested further than the immediate children of the  search root. The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsEventFrame</returns>
        PIItemsEventFrame GetEventFrames (string webId, string searchMode = null, string startTime = null, string endTime = null, string nameFilter = null, string referencedElementNameFilter = null, string categoryName = null, string templateName = null, string referencedElementTemplateName = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve event frames based on the specified conditions. By default, returns  all children of the specified root resource with a start time in the past 8 hours.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated  when searching for event frame objects to be included in the returned collection.  If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of  endTime, sortField, or sortOrder may be specified.  The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The starting time for the search. startTime must be less than or equal to the  endTime. The searchMode parameter will control whether the  comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The ending time for the search. The endTime must be greater than or equal to  the startTime. The searchMode parameter will control whether  the comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*&#39; if searchMode is not one of the  &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for finding event frames. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned event frames must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned event frames must have this template or a template derived from this template.  The default is no template filter. Specify this parameter by name. (optional)</param>
        /// <param name="referencedElementTemplateName">Specify that returned event frames must have an element in the event frame&#39;s referenced elements  collection that derives from the template. Specify this parameter by name. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies whether the search should include objects nested further than the immediate children of the  search root. The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsEventFrame</returns>
        ApiResponse<PIItemsEventFrame> GetEventFramesWithHttpInfo (string webId, string searchMode = null, string startTime = null, string endTime = null, string nameFilter = null, string referencedElementNameFilter = null, string categoryName = null, string templateName = null, string referencedElementTemplateName = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve referenced elements based on the specified conditions.  By default, this method selects all referenced elements at the root level of the asset database.
        /// </summary>
        /// <remarks>
        /// Users can search for the referenced elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the resource to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsElement</returns>
        PIItemsElement GetReferencedElements (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve referenced elements based on the specified conditions.  By default, this method selects all referenced elements at the root level of the asset database.
        /// </summary>
        /// <remarks>
        /// Users can search for the referenced elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the resource to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsElement</returns>
        ApiResponse<PIItemsElement> GetReferencedElementsWithHttpInfo (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Get the security information of the specified security item  associated with the asset database for a specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database for the security to be checked.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security information to be returned.  Multiple security items may be specified with multiple instances of the parameter.  If the parameter is not specified, only &#39;Default&#39; security item of the security information  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt;</param>
        /// <param name="userIdentity">The user identity for the security information to be checked.  Multiple security identities may be specified with multiple instances of the parameter.  If the parameter is not specified, only the current user&#39;s security rights will be returned.  &lt;see topic&#x3D;\&quot;User Identity\&quot; /&gt;</param>
        /// <param name="forceRefresh">Indicates if the security cache should be refreshed before getting security information.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsSecurityRights</returns>
        PIItemsSecurityRights GetSecurity (string webId, List<string> securityItem, List<string> userIdentity, bool? forceRefresh = null, string selectedFields = null);

        /// <summary>
        /// Get the security information of the specified security item  associated with the asset database for a specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database for the security to be checked.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security information to be returned.  Multiple security items may be specified with multiple instances of the parameter.  If the parameter is not specified, only &#39;Default&#39; security item of the security information  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt;</param>
        /// <param name="userIdentity">The user identity for the security information to be checked.  Multiple security identities may be specified with multiple instances of the parameter.  If the parameter is not specified, only the current user&#39;s security rights will be returned.  &lt;see topic&#x3D;\&quot;User Identity\&quot; /&gt;</param>
        /// <param name="forceRefresh">Indicates if the security cache should be refreshed before getting security information.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsSecurityRights</returns>
        ApiResponse<PIItemsSecurityRights> GetSecurityWithHttpInfo (string webId, List<string> securityItem, List<string> userIdentity, bool? forceRefresh = null, string selectedFields = null);
        /// <summary>
        /// Retrieve the security entries of the specified security item  associated with the asset database based on the specified criteria.  By default, all security entries for this asset database are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for filtering security entries. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsSecurityEntry</returns>
        PIItemsSecurityEntry GetSecurityEntries (string webId, string securityItem = null, string nameFilter = null, string selectedFields = null);

        /// <summary>
        /// Retrieve the security entries of the specified security item  associated with the asset database based on the specified criteria.  By default, all security entries for this asset database are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for filtering security entries. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsSecurityEntry</returns>
        ApiResponse<PIItemsSecurityEntry> GetSecurityEntriesWithHttpInfo (string webId, string securityItem = null, string nameFilter = null, string selectedFields = null);
        /// <summary>
        /// Retrieve the security entry of the specified security item  associated with the asset database with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PISecurityEntry</returns>
        PISecurityEntry GetSecurityEntryByName (string webId, string name, string securityItem = null, string selectedFields = null);

        /// <summary>
        /// Retrieve the security entry of the specified security item  associated with the asset database with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PISecurityEntry</returns>
        ApiResponse<PISecurityEntry> GetSecurityEntryByNameWithHttpInfo (string webId, string name, string securityItem = null, string selectedFields = null);
        /// <summary>
        /// Retrieve table categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsCategory</returns>
        PIItemsCategory GetTableCategories (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve table categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsCategory</returns>
        ApiResponse<PIItemsCategory> GetTableCategoriesWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve tables for given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsTable</returns>
        PIItemsTable GetTables (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve tables for given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsTable</returns>
        ApiResponse<PIItemsTable> GetTablesWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Import an asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="importMode">Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;.  Multiple import modes may be specified by using multiple instances of importMode.  &lt;see topic&#x3D;\&quot;Import Mode\&quot; /&gt; (optional)</param>
        /// <returns>Object</returns>
        Object Import (string webId, List<string> importMode = null);

        /// <summary>
        /// Import an asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="importMode">Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;.  Multiple import modes may be specified by using multiple instances of importMode.  &lt;see topic&#x3D;\&quot;Import Mode\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ImportWithHttpInfo (string webId, List<string> importMode = null);
        /// <summary>
        /// Remove a reference to an existing element from the specified database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be removed from.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Object</returns>
        Object RemoveReferencedElement (string webId, List<string> referencedElementWebId);

        /// <summary>
        /// Remove a reference to an existing element from the specified database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be removed from.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveReferencedElementWithHttpInfo (string webId, List<string> referencedElementWebId);
        /// <summary>
        /// Update an asset database by replacing items in its definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="database">A partial database containing the desired changes.</param>
        /// <returns>Object</returns>
        Object Update (string webId, PIAssetDatabase database);

        /// <summary>
        /// Update an asset database by replacing items in its definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="database">A partial database containing the desired changes.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateWithHttpInfo (string webId, PIAssetDatabase database);
        /// <summary>
        /// Update a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be updated.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry.</param>
        /// <param name="securityEntry">The new security entry definition.   The full list of allow and deny rights must be supplied or they will be removed.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be updated.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be updated.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Object</returns>
        Object UpdateSecurityEntry (string webId, string name, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null);

        /// <summary>
        /// Update a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be updated.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry.</param>
        /// <param name="securityEntry">The new security entry definition.   The full list of allow and deny rights must be supplied or they will be removed.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be updated.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be updated.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateSecurityEntryWithHttpInfo (string webId, string name, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a reference to an existing element to the specified database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be added to.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referenceType">The name of the reference type between the parent and the referenced element.  This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;.  &lt;see topic&#x3D;\&quot;Reference Type\&quot; /&gt; (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddReferencedElementAsync (string webId, List<string> referencedElementWebId, string referenceType = null);

        /// <summary>
        /// Add a reference to an existing element to the specified database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be added to.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referenceType">The name of the reference type between the parent and the referenced element.  This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;.  &lt;see topic&#x3D;\&quot;Reference Type\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddReferencedElementAsyncWithHttpInfo (string webId, List<string> referencedElementWebId, string referenceType = null);
        /// <summary>
        /// Create an analysis category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="analysisCategory">The new analysis category definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateAnalysisCategoryAsync (string webId, PICategory analysisCategory);

        /// <summary>
        /// Create an analysis category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="analysisCategory">The new analysis category definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAnalysisCategoryAsyncWithHttpInfo (string webId, PICategory analysisCategory);
        /// <summary>
        /// Create an analysis template at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// Analyses that are based on an analysis template will inherit characteristics defined in the template.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new analysis template definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateAnalysisTemplateAsync (string webId, PIAnalysisTemplate template);

        /// <summary>
        /// Create an analysis template at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// Analyses that are based on an analysis template will inherit characteristics defined in the template.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new analysis template definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAnalysisTemplateAsyncWithHttpInfo (string webId, PIAnalysisTemplate template);
        /// <summary>
        /// Create an attribute category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the attribute category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="attributeCategory">The new attribute category definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateAttributeCategoryAsync (string webId, PICategory attributeCategory);

        /// <summary>
        /// Create an attribute category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the attribute category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="attributeCategory">The new attribute category definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAttributeCategoryAsyncWithHttpInfo (string webId, PICategory attributeCategory);
        /// <summary>
        /// Create a child element.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database on which to create the element.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="element">The new element definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateElementAsync (string webId, PIElement element);

        /// <summary>
        /// Create a child element.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database on which to create the element.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="element">The new element definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateElementAsyncWithHttpInfo (string webId, PIElement element);
        /// <summary>
        /// Create an element category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementCategory">The new element category definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateElementCategoryAsync (string webId, PICategory elementCategory);

        /// <summary>
        /// Create an element category at the Asset Database root.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementCategory">The new element category definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateElementCategoryAsyncWithHttpInfo (string webId, PICategory elementCategory);
        /// <summary>
        /// Create a &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;template&lt;/see&gt; at the Asset Database root.  Specify InstanceType of \&quot;Element\&quot; or \&quot;EventFrame\&quot; to create element or event frame  template respectively. Only these two types of templates can be created.
        /// </summary>
        /// <remarks>
        /// Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new element template definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateElementTemplateAsync (string webId, PIElementTemplate template);

        /// <summary>
        /// Create a &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;template&lt;/see&gt; at the Asset Database root.  Specify InstanceType of \&quot;Element\&quot; or \&quot;EventFrame\&quot; to create element or event frame  template respectively. Only these two types of templates can be created.
        /// </summary>
        /// <remarks>
        /// Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new element template definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateElementTemplateAsyncWithHttpInfo (string webId, PIElementTemplate template);
        /// <summary>
        /// Create an &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration&lt;/see&gt; set at the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the enumeration set.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="enumerationSet">The new enumeration set definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateEnumerationSetAsync (string webId, PIEnumerationSet enumerationSet);

        /// <summary>
        /// Create an &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration&lt;/see&gt; set at the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the enumeration set.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="enumerationSet">The new enumeration set definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateEnumerationSetAsyncWithHttpInfo (string webId, PIEnumerationSet enumerationSet);
        /// <summary>
        /// Create an event frame.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database on which to create the event frame.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="eventFrame">The new event frame definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateEventFrameAsync (string webId, PIEventFrame eventFrame);

        /// <summary>
        /// Create an event frame.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database on which to create the event frame.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="eventFrame">The new event frame definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateEventFrameAsyncWithHttpInfo (string webId, PIEventFrame eventFrame);
        /// <summary>
        /// Create a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be created.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityEntry">The new security entry definition.  The full list of allow and deny rights must be supplied.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be created.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be created.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateSecurityEntryAsync (string webId, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null);

        /// <summary>
        /// Create a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be created.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityEntry">The new security entry definition.  The full list of allow and deny rights must be supplied.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be created.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be created.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateSecurityEntryAsyncWithHttpInfo (string webId, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null);
        /// <summary>
        /// Create a table on the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="table">The new table definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateTableAsync (string webId, PITable table);

        /// <summary>
        /// Create a table on the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="table">The new table definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTableAsyncWithHttpInfo (string webId, PITable table);
        /// <summary>
        /// Create a table category on the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="tableCategory">The new table category definition.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CreateTableCategoryAsync (string webId, PICategory tableCategory);

        /// <summary>
        /// Create a table category on the Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="tableCategory">The new table category definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateTableCategoryAsyncWithHttpInfo (string webId, PICategory tableCategory);
        /// <summary>
        /// Delete an asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteAsync (string webId);

        /// <summary>
        /// Delete an asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string webId);
        /// <summary>
        /// Delete a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be deleted.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries to be deleted.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be deleted.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteSecurityEntryAsync (string webId, string name, string securityItem = null, bool? applyToChildren = null);

        /// <summary>
        /// Delete a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be deleted.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries to be deleted.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be deleted.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSecurityEntryAsyncWithHttpInfo (string webId, string name, string securityItem = null, bool? applyToChildren = null);
        /// <summary>
        /// Export the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="exportMode">Indicates the type of export to perform. The default is &#39;StrongReferences&#39;.  Multiple export modes may be specified by using multiple instances of exportMode.  &lt;see topic&#x3D;\&quot;Export Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*-30d&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ExportAsync (string webId, List<string> exportMode = null, string startTime = null, string endTime = null);

        /// <summary>
        /// Export the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="exportMode">Indicates the type of export to perform. The default is &#39;StrongReferences&#39;.  Multiple export modes may be specified by using multiple instances of exportMode.  &lt;see topic&#x3D;\&quot;Export Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*-30d&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportAsyncWithHttpInfo (string webId, List<string> exportMode = null, string startTime = null, string endTime = null);
        /// <summary>
        /// Retrieve analyses based on the specified conditions.
        /// </summary>
        /// <remarks>
        /// Users can search for the analyses based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the  analyses that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search for the analyses.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding analyses. The default is null.  &lt;see topic&#x3D;\&quot;Query String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsAnalysis</returns>
        System.Threading.Tasks.Task<PIItemsAnalysis> FindAnalysesAsync (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve analyses based on the specified conditions.
        /// </summary>
        /// <remarks>
        /// Users can search for the analyses based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the  analyses that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search for the analyses.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding analyses. The default is null.  &lt;see topic&#x3D;\&quot;Query String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsAnalysis)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsAnalysis>> FindAnalysesAsyncWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieves a list of element attributes matching the specified filters from the specified asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementNameFilter">The element name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementDescriptionFilter">The element description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="elementTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)</param>
        /// <param name="elementType">Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsAttribute</returns>
        System.Threading.Tasks.Task<PIItemsAttribute> FindElementAttributesAsync (string webId, string elementNameFilter = null, string elementDescriptionFilter = null, string elementCategory = null, string elementTemplate = null, string elementType = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieves a list of element attributes matching the specified filters from the specified asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementNameFilter">The element name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementDescriptionFilter">The element description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="elementTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)</param>
        /// <param name="elementType">Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsAttribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsAttribute>> FindElementAttributesAsyncWithHttpInfo (string webId, string elementNameFilter = null, string elementDescriptionFilter = null, string elementCategory = null, string elementTemplate = null, string elementType = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated when searching for event frames.          The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">A string representing the earliest starting time for the event frames to be matched.   startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">A string representing the latest ending time for the event frames to be matched.   The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameNameFilter">The event frame name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameDescriptionFilter">The event frame description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="eventFrameTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template.  The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsAttribute</returns>
        System.Threading.Tasks.Task<PIItemsAttribute> FindEventFrameAttributesAsync (string webId, string searchMode = null, string startTime = null, string endTime = null, string eventFrameNameFilter = null, string eventFrameDescriptionFilter = null, string referencedElementNameFilter = null, string eventFrameCategory = null, string eventFrameTemplate = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieves a list of event frame attributes matching the specified filters from the specified asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated when searching for event frames.          The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">A string representing the earliest starting time for the event frames to be matched.   startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">A string representing the latest ending time for the event frames to be matched.   The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameNameFilter">The event frame name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameDescriptionFilter">The event frame description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="eventFrameTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template.  The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsAttribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsAttribute>> FindEventFrameAttributesAsyncWithHttpInfo (string webId, string searchMode = null, string startTime = null, string endTime = null, string eventFrameNameFilter = null, string eventFrameDescriptionFilter = null, string referencedElementNameFilter = null, string eventFrameCategory = null, string eventFrameTemplate = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve an Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIAssetDatabase</returns>
        System.Threading.Tasks.Task<PIAssetDatabase> GetAsync (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve an Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIAssetDatabase)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIAssetDatabase>> GetAsyncWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve analysis categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsCategory</returns>
        System.Threading.Tasks.Task<PIItemsCategory> GetAnalysisCategoriesAsync (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve analysis categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsCategory>> GetAnalysisCategoriesAsyncWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.AnalysisTemplateController\&quot;&gt;analysis templates&lt;/see&gt; based on the specified criteria.  By default, all analysis templates in the specified Asset Database are returned.
        /// </summary>
        /// <remarks>
        /// Users can search for the analysis templates based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsAnalysisTemplate</returns>
        System.Threading.Tasks.Task<PIItemsAnalysisTemplate> GetAnalysisTemplatesAsync (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.AnalysisTemplateController\&quot;&gt;analysis templates&lt;/see&gt; based on the specified criteria.  By default, all analysis templates in the specified Asset Database are returned.
        /// </summary>
        /// <remarks>
        /// Users can search for the analysis templates based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsAnalysisTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsAnalysisTemplate>> GetAnalysisTemplatesAsyncWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve attribute categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsCategory</returns>
        System.Threading.Tasks.Task<PIItemsCategory> GetAttributeCategoriesAsync (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve attribute categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsCategory>> GetAttributeCategoriesAsyncWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve an Asset Database by path.
        /// </summary>
        /// <remarks>
        /// This method returns an asset database based on the hierarchical path associated with it, and should be used when a path  has been received from a separate part of the PI System for use in the PI Web API.  Users should primarily search  with the WebID when available.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the database. &lt;see topic&#x3D;\&quot;Path-Syntax\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIAssetDatabase</returns>
        System.Threading.Tasks.Task<PIAssetDatabase> GetByPathAsync (string path, string selectedFields = null);

        /// <summary>
        /// Retrieve an Asset Database by path.
        /// </summary>
        /// <remarks>
        /// This method returns an asset database based on the hierarchical path associated with it, and should be used when a path  has been received from a separate part of the PI System for use in the PI Web API.  Users should primarily search  with the WebID when available.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the database. &lt;see topic&#x3D;\&quot;Path-Syntax\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIAssetDatabase)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIAssetDatabase>> GetByPathAsyncWithHttpInfo (string path, string selectedFields = null);
        /// <summary>
        /// Retrieve element categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsCategory</returns>
        System.Threading.Tasks.Task<PIItemsCategory> GetElementCategoriesAsync (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve element categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsCategory>> GetElementCategoriesAsyncWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;element templates&lt;/see&gt; based on the specified criteria.  Only templates of instance type \&quot;Element\&quot; and \&quot;EventFrame\&quot; are returned.  By default, all element and event frame templates in the specified Asset Database are returned.
        /// </summary>
        /// <remarks>
        /// Users can search for the element and event frame template based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsElementTemplate</returns>
        System.Threading.Tasks.Task<PIItemsElementTemplate> GetElementTemplatesAsync (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;element templates&lt;/see&gt; based on the specified criteria.  Only templates of instance type \&quot;Element\&quot; and \&quot;EventFrame\&quot; are returned.  By default, all element and event frame templates in the specified Asset Database are returned.
        /// </summary>
        /// <remarks>
        /// Users can search for the element and event frame template based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsElementTemplate)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsElementTemplate>> GetElementTemplatesAsyncWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve elements based on the specified conditions.  By default, this method selects immediate children of the specified asset database.
        /// </summary>
        /// <remarks>
        /// Users can search for the elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than the immediate children of the searchRoot.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsElement</returns>
        System.Threading.Tasks.Task<PIItemsElement> GetElementsAsync (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve elements based on the specified conditions.  By default, this method selects immediate children of the specified asset database.
        /// </summary>
        /// <remarks>
        /// Users can search for the elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than the immediate children of the searchRoot.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsElement>> GetElementsAsyncWithHttpInfo (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration sets&lt;/see&gt; for given asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsEnumerationSet</returns>
        System.Threading.Tasks.Task<PIItemsEnumerationSet> GetEnumerationSetsAsync (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration sets&lt;/see&gt; for given asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsEnumerationSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsEnumerationSet>> GetEnumerationSetsAsyncWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve event frames based on the specified conditions. By default, returns  all children of the specified root resource with a start time in the past 8 hours.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated  when searching for event frame objects to be included in the returned collection.  If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of  endTime, sortField, or sortOrder may be specified.  The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The starting time for the search. startTime must be less than or equal to the  endTime. The searchMode parameter will control whether the  comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The ending time for the search. The endTime must be greater than or equal to  the startTime. The searchMode parameter will control whether  the comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*&#39; if searchMode is not one of the  &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for finding event frames. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned event frames must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned event frames must have this template or a template derived from this template.  The default is no template filter. Specify this parameter by name. (optional)</param>
        /// <param name="referencedElementTemplateName">Specify that returned event frames must have an element in the event frame&#39;s referenced elements  collection that derives from the template. Specify this parameter by name. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies whether the search should include objects nested further than the immediate children of the  search root. The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsEventFrame</returns>
        System.Threading.Tasks.Task<PIItemsEventFrame> GetEventFramesAsync (string webId, string searchMode = null, string startTime = null, string endTime = null, string nameFilter = null, string referencedElementNameFilter = null, string categoryName = null, string templateName = null, string referencedElementTemplateName = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve event frames based on the specified conditions. By default, returns  all children of the specified root resource with a start time in the past 8 hours.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated  when searching for event frame objects to be included in the returned collection.  If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of  endTime, sortField, or sortOrder may be specified.  The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The starting time for the search. startTime must be less than or equal to the  endTime. The searchMode parameter will control whether the  comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The ending time for the search. The endTime must be greater than or equal to  the startTime. The searchMode parameter will control whether  the comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*&#39; if searchMode is not one of the  &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for finding event frames. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned event frames must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned event frames must have this template or a template derived from this template.  The default is no template filter. Specify this parameter by name. (optional)</param>
        /// <param name="referencedElementTemplateName">Specify that returned event frames must have an element in the event frame&#39;s referenced elements  collection that derives from the template. Specify this parameter by name. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies whether the search should include objects nested further than the immediate children of the  search root. The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsEventFrame)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsEventFrame>> GetEventFramesAsyncWithHttpInfo (string webId, string searchMode = null, string startTime = null, string endTime = null, string nameFilter = null, string referencedElementNameFilter = null, string categoryName = null, string templateName = null, string referencedElementTemplateName = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Retrieve referenced elements based on the specified conditions.  By default, this method selects all referenced elements at the root level of the asset database.
        /// </summary>
        /// <remarks>
        /// Users can search for the referenced elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the resource to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsElement</returns>
        System.Threading.Tasks.Task<PIItemsElement> GetReferencedElementsAsync (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);

        /// <summary>
        /// Retrieve referenced elements based on the specified conditions.  By default, this method selects all referenced elements at the root level of the asset database.
        /// </summary>
        /// <remarks>
        /// Users can search for the referenced elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the resource to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsElement)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsElement>> GetReferencedElementsAsyncWithHttpInfo (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null);
        /// <summary>
        /// Get the security information of the specified security item  associated with the asset database for a specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database for the security to be checked.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security information to be returned.  Multiple security items may be specified with multiple instances of the parameter.  If the parameter is not specified, only &#39;Default&#39; security item of the security information  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt;</param>
        /// <param name="userIdentity">The user identity for the security information to be checked.  Multiple security identities may be specified with multiple instances of the parameter.  If the parameter is not specified, only the current user&#39;s security rights will be returned.  &lt;see topic&#x3D;\&quot;User Identity\&quot; /&gt;</param>
        /// <param name="forceRefresh">Indicates if the security cache should be refreshed before getting security information.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsSecurityRights</returns>
        System.Threading.Tasks.Task<PIItemsSecurityRights> GetSecurityAsync (string webId, List<string> securityItem, List<string> userIdentity, bool? forceRefresh = null, string selectedFields = null);

        /// <summary>
        /// Get the security information of the specified security item  associated with the asset database for a specified user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database for the security to be checked.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security information to be returned.  Multiple security items may be specified with multiple instances of the parameter.  If the parameter is not specified, only &#39;Default&#39; security item of the security information  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt;</param>
        /// <param name="userIdentity">The user identity for the security information to be checked.  Multiple security identities may be specified with multiple instances of the parameter.  If the parameter is not specified, only the current user&#39;s security rights will be returned.  &lt;see topic&#x3D;\&quot;User Identity\&quot; /&gt;</param>
        /// <param name="forceRefresh">Indicates if the security cache should be refreshed before getting security information.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsSecurityRights)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsSecurityRights>> GetSecurityAsyncWithHttpInfo (string webId, List<string> securityItem, List<string> userIdentity, bool? forceRefresh = null, string selectedFields = null);
        /// <summary>
        /// Retrieve the security entries of the specified security item  associated with the asset database based on the specified criteria.  By default, all security entries for this asset database are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for filtering security entries. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsSecurityEntry</returns>
        System.Threading.Tasks.Task<PIItemsSecurityEntry> GetSecurityEntriesAsync (string webId, string securityItem = null, string nameFilter = null, string selectedFields = null);

        /// <summary>
        /// Retrieve the security entries of the specified security item  associated with the asset database based on the specified criteria.  By default, all security entries for this asset database are returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for filtering security entries. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsSecurityEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsSecurityEntry>> GetSecurityEntriesAsyncWithHttpInfo (string webId, string securityItem = null, string nameFilter = null, string selectedFields = null);
        /// <summary>
        /// Retrieve the security entry of the specified security item  associated with the asset database with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PISecurityEntry</returns>
        System.Threading.Tasks.Task<PISecurityEntry> GetSecurityEntryByNameAsync (string webId, string name, string securityItem = null, string selectedFields = null);

        /// <summary>
        /// Retrieve the security entry of the specified security item  associated with the asset database with the specified name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PISecurityEntry)</returns>
        System.Threading.Tasks.Task<ApiResponse<PISecurityEntry>> GetSecurityEntryByNameAsyncWithHttpInfo (string webId, string name, string securityItem = null, string selectedFields = null);
        /// <summary>
        /// Retrieve table categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsCategory</returns>
        System.Threading.Tasks.Task<PIItemsCategory> GetTableCategoriesAsync (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve table categories for a given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsCategory>> GetTableCategoriesAsyncWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Retrieve tables for given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsTable</returns>
        System.Threading.Tasks.Task<PIItemsTable> GetTablesAsync (string webId, string selectedFields = null);

        /// <summary>
        /// Retrieve tables for given Asset Database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsTable)</returns>
        System.Threading.Tasks.Task<ApiResponse<PIItemsTable>> GetTablesAsyncWithHttpInfo (string webId, string selectedFields = null);
        /// <summary>
        /// Import an asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="importMode">Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;.  Multiple import modes may be specified by using multiple instances of importMode.  &lt;see topic&#x3D;\&quot;Import Mode\&quot; /&gt; (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ImportAsync (string webId, List<string> importMode = null);

        /// <summary>
        /// Import an asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="importMode">Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;.  Multiple import modes may be specified by using multiple instances of importMode.  &lt;see topic&#x3D;\&quot;Import Mode\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportAsyncWithHttpInfo (string webId, List<string> importMode = null);
        /// <summary>
        /// Remove a reference to an existing element from the specified database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be removed from.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveReferencedElementAsync (string webId, List<string> referencedElementWebId);

        /// <summary>
        /// Remove a reference to an existing element from the specified database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be removed from.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveReferencedElementAsyncWithHttpInfo (string webId, List<string> referencedElementWebId);
        /// <summary>
        /// Update an asset database by replacing items in its definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="database">A partial database containing the desired changes.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateAsync (string webId, PIAssetDatabase database);

        /// <summary>
        /// Update an asset database by replacing items in its definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="database">A partial database containing the desired changes.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string webId, PIAssetDatabase database);
        /// <summary>
        /// Update a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be updated.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry.</param>
        /// <param name="securityEntry">The new security entry definition.   The full list of allow and deny rights must be supplied or they will be removed.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be updated.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be updated.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateSecurityEntryAsync (string webId, string name, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null);

        /// <summary>
        /// Update a security entry owned by the asset database.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be updated.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry.</param>
        /// <param name="securityEntry">The new security entry definition.   The full list of allow and deny rights must be supplied or they will be removed.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be updated.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be updated.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSecurityEntryAsyncWithHttpInfo (string webId, string name, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetDataApiApi : IAssetDataApiApi
    {
        private OSIsoft.PIDevClub.PIWebApiClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetDataApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetDataApiApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = OSIsoft.PIDevClub.PIWebApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetDataApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetDataApiApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = OSIsoft.PIDevClub.PIWebApiClient.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OSIsoft.PIDevClub.PIWebApiClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a reference to an existing element to the specified database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be added to.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referenceType">The name of the reference type between the parent and the referenced element.  This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;.  &lt;see topic&#x3D;\&quot;Reference Type\&quot; /&gt; (optional)</param>
        /// <returns>Object</returns>
        public Object AddReferencedElement (string webId, List<string> referencedElementWebId, string referenceType = null)
        {
             ApiResponse<Object> localVarResponse = AddReferencedElementWithHttpInfo(webId, referencedElementWebId, referenceType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a reference to an existing element to the specified database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be added to.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referenceType">The name of the reference type between the parent and the referenced element.  This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;.  &lt;see topic&#x3D;\&quot;Reference Type\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddReferencedElementWithHttpInfo (string webId, List<string> referencedElementWebId, string referenceType = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->AddReferencedElement");
            // verify the required parameter 'referencedElementWebId' is set
            if (referencedElementWebId == null)
                throw new ApiException(400, "Missing required parameter 'referencedElementWebId' when calling AssetDataApiApi->AddReferencedElement");

            var localVarPath = "/assetdatabases/{webId}/referencedelements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (referencedElementWebId != null) localVarQueryParams.Add("referencedElementWebId", Configuration.ApiClient.ParameterToString(referencedElementWebId)); // query parameter
            if (referenceType != null) localVarQueryParams.Add("referenceType", Configuration.ApiClient.ParameterToString(referenceType)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReferencedElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Add a reference to an existing element to the specified database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be added to.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referenceType">The name of the reference type between the parent and the referenced element.  This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;.  &lt;see topic&#x3D;\&quot;Reference Type\&quot; /&gt; (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddReferencedElementAsync (string webId, List<string> referencedElementWebId, string referenceType = null)
        {
             ApiResponse<Object> localVarResponse = await AddReferencedElementAsyncWithHttpInfo(webId, referencedElementWebId, referenceType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a reference to an existing element to the specified database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be added to.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referenceType">The name of the reference type between the parent and the referenced element.  This must be a \&quot;strong\&quot; reference type. The default is \&quot;parent-child\&quot;.  &lt;see topic&#x3D;\&quot;Reference Type\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddReferencedElementAsyncWithHttpInfo (string webId, List<string> referencedElementWebId, string referenceType = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->AddReferencedElement");
            // verify the required parameter 'referencedElementWebId' is set
            if (referencedElementWebId == null)
                throw new ApiException(400, "Missing required parameter 'referencedElementWebId' when calling AssetDataApiApi->AddReferencedElement");

            var localVarPath = "/assetdatabases/{webId}/referencedelements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (referencedElementWebId != null) localVarQueryParams.Add("referencedElementWebId", Configuration.ApiClient.ParameterToString(referencedElementWebId)); // query parameter
            if (referenceType != null) localVarQueryParams.Add("referenceType", Configuration.ApiClient.ParameterToString(referenceType)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddReferencedElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an analysis category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="analysisCategory">The new analysis category definition.</param>
        /// <returns>Object</returns>
        public Object CreateAnalysisCategory (string webId, PICategory analysisCategory)
        {
             ApiResponse<Object> localVarResponse = CreateAnalysisCategoryWithHttpInfo(webId, analysisCategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an analysis category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="analysisCategory">The new analysis category definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateAnalysisCategoryWithHttpInfo (string webId, PICategory analysisCategory)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateAnalysisCategory");
            // verify the required parameter 'analysisCategory' is set
            if (analysisCategory == null)
                throw new ApiException(400, "Missing required parameter 'analysisCategory' when calling AssetDataApiApi->CreateAnalysisCategory");

            var localVarPath = "/assetdatabases/{webId}/analysiscategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (analysisCategory != null && analysisCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(analysisCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analysisCategory; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnalysisCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an analysis category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="analysisCategory">The new analysis category definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateAnalysisCategoryAsync (string webId, PICategory analysisCategory)
        {
             ApiResponse<Object> localVarResponse = await CreateAnalysisCategoryAsyncWithHttpInfo(webId, analysisCategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an analysis category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="analysisCategory">The new analysis category definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAnalysisCategoryAsyncWithHttpInfo (string webId, PICategory analysisCategory)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateAnalysisCategory");
            // verify the required parameter 'analysisCategory' is set
            if (analysisCategory == null)
                throw new ApiException(400, "Missing required parameter 'analysisCategory' when calling AssetDataApiApi->CreateAnalysisCategory");

            var localVarPath = "/assetdatabases/{webId}/analysiscategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (analysisCategory != null && analysisCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(analysisCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = analysisCategory; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnalysisCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an analysis template at the Asset Database root. Analyses that are based on an analysis template will inherit characteristics defined in the template.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new analysis template definition.</param>
        /// <returns>Object</returns>
        public Object CreateAnalysisTemplate (string webId, PIAnalysisTemplate template)
        {
             ApiResponse<Object> localVarResponse = CreateAnalysisTemplateWithHttpInfo(webId, template);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an analysis template at the Asset Database root. Analyses that are based on an analysis template will inherit characteristics defined in the template.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new analysis template definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateAnalysisTemplateWithHttpInfo (string webId, PIAnalysisTemplate template)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateAnalysisTemplate");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling AssetDataApiApi->CreateAnalysisTemplate");

            var localVarPath = "/assetdatabases/{webId}/analysistemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnalysisTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an analysis template at the Asset Database root. Analyses that are based on an analysis template will inherit characteristics defined in the template.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new analysis template definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateAnalysisTemplateAsync (string webId, PIAnalysisTemplate template)
        {
             ApiResponse<Object> localVarResponse = await CreateAnalysisTemplateAsyncWithHttpInfo(webId, template);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an analysis template at the Asset Database root. Analyses that are based on an analysis template will inherit characteristics defined in the template.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the analysis template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new analysis template definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAnalysisTemplateAsyncWithHttpInfo (string webId, PIAnalysisTemplate template)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateAnalysisTemplate");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling AssetDataApiApi->CreateAnalysisTemplate");

            var localVarPath = "/assetdatabases/{webId}/analysistemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAnalysisTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an attribute category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the attribute category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="attributeCategory">The new attribute category definition.</param>
        /// <returns>Object</returns>
        public Object CreateAttributeCategory (string webId, PICategory attributeCategory)
        {
             ApiResponse<Object> localVarResponse = CreateAttributeCategoryWithHttpInfo(webId, attributeCategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an attribute category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the attribute category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="attributeCategory">The new attribute category definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateAttributeCategoryWithHttpInfo (string webId, PICategory attributeCategory)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateAttributeCategory");
            // verify the required parameter 'attributeCategory' is set
            if (attributeCategory == null)
                throw new ApiException(400, "Missing required parameter 'attributeCategory' when calling AssetDataApiApi->CreateAttributeCategory");

            var localVarPath = "/assetdatabases/{webId}/attributecategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (attributeCategory != null && attributeCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attributeCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attributeCategory; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAttributeCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an attribute category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the attribute category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="attributeCategory">The new attribute category definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateAttributeCategoryAsync (string webId, PICategory attributeCategory)
        {
             ApiResponse<Object> localVarResponse = await CreateAttributeCategoryAsyncWithHttpInfo(webId, attributeCategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an attribute category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the attribute category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="attributeCategory">The new attribute category definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAttributeCategoryAsyncWithHttpInfo (string webId, PICategory attributeCategory)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateAttributeCategory");
            // verify the required parameter 'attributeCategory' is set
            if (attributeCategory == null)
                throw new ApiException(400, "Missing required parameter 'attributeCategory' when calling AssetDataApiApi->CreateAttributeCategory");

            var localVarPath = "/assetdatabases/{webId}/attributecategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (attributeCategory != null && attributeCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attributeCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attributeCategory; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAttributeCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a child element. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database on which to create the element.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="element">The new element definition.</param>
        /// <returns>Object</returns>
        public Object CreateElement (string webId, PIElement element)
        {
             ApiResponse<Object> localVarResponse = CreateElementWithHttpInfo(webId, element);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a child element. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database on which to create the element.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="element">The new element definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateElementWithHttpInfo (string webId, PIElement element)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateElement");
            // verify the required parameter 'element' is set
            if (element == null)
                throw new ApiException(400, "Missing required parameter 'element' when calling AssetDataApiApi->CreateElement");

            var localVarPath = "/assetdatabases/{webId}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (element != null && element.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(element); // http body (model) parameter
            }
            else
            {
                localVarPostBody = element; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a child element. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database on which to create the element.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="element">The new element definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateElementAsync (string webId, PIElement element)
        {
             ApiResponse<Object> localVarResponse = await CreateElementAsyncWithHttpInfo(webId, element);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a child element. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database on which to create the element.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="element">The new element definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateElementAsyncWithHttpInfo (string webId, PIElement element)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateElement");
            // verify the required parameter 'element' is set
            if (element == null)
                throw new ApiException(400, "Missing required parameter 'element' when calling AssetDataApiApi->CreateElement");

            var localVarPath = "/assetdatabases/{webId}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (element != null && element.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(element); // http body (model) parameter
            }
            else
            {
                localVarPostBody = element; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an element category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementCategory">The new element category definition.</param>
        /// <returns>Object</returns>
        public Object CreateElementCategory (string webId, PICategory elementCategory)
        {
             ApiResponse<Object> localVarResponse = CreateElementCategoryWithHttpInfo(webId, elementCategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an element category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementCategory">The new element category definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateElementCategoryWithHttpInfo (string webId, PICategory elementCategory)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateElementCategory");
            // verify the required parameter 'elementCategory' is set
            if (elementCategory == null)
                throw new ApiException(400, "Missing required parameter 'elementCategory' when calling AssetDataApiApi->CreateElementCategory");

            var localVarPath = "/assetdatabases/{webId}/elementcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (elementCategory != null && elementCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(elementCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = elementCategory; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateElementCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an element category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementCategory">The new element category definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateElementCategoryAsync (string webId, PICategory elementCategory)
        {
             ApiResponse<Object> localVarResponse = await CreateElementCategoryAsyncWithHttpInfo(webId, elementCategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an element category at the Asset Database root. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementCategory">The new element category definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateElementCategoryAsyncWithHttpInfo (string webId, PICategory elementCategory)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateElementCategory");
            // verify the required parameter 'elementCategory' is set
            if (elementCategory == null)
                throw new ApiException(400, "Missing required parameter 'elementCategory' when calling AssetDataApiApi->CreateElementCategory");

            var localVarPath = "/assetdatabases/{webId}/elementcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (elementCategory != null && elementCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(elementCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = elementCategory; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateElementCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;template&lt;/see&gt; at the Asset Database root.  Specify InstanceType of \&quot;Element\&quot; or \&quot;EventFrame\&quot; to create element or event frame  template respectively. Only these two types of templates can be created. Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new element template definition.</param>
        /// <returns>Object</returns>
        public Object CreateElementTemplate (string webId, PIElementTemplate template)
        {
             ApiResponse<Object> localVarResponse = CreateElementTemplateWithHttpInfo(webId, template);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;template&lt;/see&gt; at the Asset Database root.  Specify InstanceType of \&quot;Element\&quot; or \&quot;EventFrame\&quot; to create element or event frame  template respectively. Only these two types of templates can be created. Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new element template definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateElementTemplateWithHttpInfo (string webId, PIElementTemplate template)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateElementTemplate");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling AssetDataApiApi->CreateElementTemplate");

            var localVarPath = "/assetdatabases/{webId}/elementtemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateElementTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;template&lt;/see&gt; at the Asset Database root.  Specify InstanceType of \&quot;Element\&quot; or \&quot;EventFrame\&quot; to create element or event frame  template respectively. Only these two types of templates can be created. Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new element template definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateElementTemplateAsync (string webId, PIElementTemplate template)
        {
             ApiResponse<Object> localVarResponse = await CreateElementTemplateAsyncWithHttpInfo(webId, template);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;template&lt;/see&gt; at the Asset Database root.  Specify InstanceType of \&quot;Element\&quot; or \&quot;EventFrame\&quot; to create element or event frame  template respectively. Only these two types of templates can be created. Elements and event frames that are based on an element template will inherit characteristics defined in the template.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the element template.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="template">The new element template definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateElementTemplateAsyncWithHttpInfo (string webId, PIElementTemplate template)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateElementTemplate");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling AssetDataApiApi->CreateElementTemplate");

            var localVarPath = "/assetdatabases/{webId}/elementtemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (template != null && template.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(template); // http body (model) parameter
            }
            else
            {
                localVarPostBody = template; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateElementTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration&lt;/see&gt; set at the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the enumeration set.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="enumerationSet">The new enumeration set definition.</param>
        /// <returns>Object</returns>
        public Object CreateEnumerationSet (string webId, PIEnumerationSet enumerationSet)
        {
             ApiResponse<Object> localVarResponse = CreateEnumerationSetWithHttpInfo(webId, enumerationSet);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration&lt;/see&gt; set at the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the enumeration set.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="enumerationSet">The new enumeration set definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateEnumerationSetWithHttpInfo (string webId, PIEnumerationSet enumerationSet)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateEnumerationSet");
            // verify the required parameter 'enumerationSet' is set
            if (enumerationSet == null)
                throw new ApiException(400, "Missing required parameter 'enumerationSet' when calling AssetDataApiApi->CreateEnumerationSet");

            var localVarPath = "/assetdatabases/{webId}/enumerationsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (enumerationSet != null && enumerationSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(enumerationSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enumerationSet; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEnumerationSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration&lt;/see&gt; set at the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the enumeration set.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="enumerationSet">The new enumeration set definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateEnumerationSetAsync (string webId, PIEnumerationSet enumerationSet)
        {
             ApiResponse<Object> localVarResponse = await CreateEnumerationSetAsyncWithHttpInfo(webId, enumerationSet);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration&lt;/see&gt; set at the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the enumeration set.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="enumerationSet">The new enumeration set definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateEnumerationSetAsyncWithHttpInfo (string webId, PIEnumerationSet enumerationSet)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateEnumerationSet");
            // verify the required parameter 'enumerationSet' is set
            if (enumerationSet == null)
                throw new ApiException(400, "Missing required parameter 'enumerationSet' when calling AssetDataApiApi->CreateEnumerationSet");

            var localVarPath = "/assetdatabases/{webId}/enumerationsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (enumerationSet != null && enumerationSet.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(enumerationSet); // http body (model) parameter
            }
            else
            {
                localVarPostBody = enumerationSet; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEnumerationSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an event frame. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database on which to create the event frame.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="eventFrame">The new event frame definition.</param>
        /// <returns>Object</returns>
        public Object CreateEventFrame (string webId, PIEventFrame eventFrame)
        {
             ApiResponse<Object> localVarResponse = CreateEventFrameWithHttpInfo(webId, eventFrame);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an event frame. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database on which to create the event frame.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="eventFrame">The new event frame definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateEventFrameWithHttpInfo (string webId, PIEventFrame eventFrame)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateEventFrame");
            // verify the required parameter 'eventFrame' is set
            if (eventFrame == null)
                throw new ApiException(400, "Missing required parameter 'eventFrame' when calling AssetDataApiApi->CreateEventFrame");

            var localVarPath = "/assetdatabases/{webId}/eventframes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (eventFrame != null && eventFrame.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventFrame); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventFrame; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventFrame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create an event frame. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database on which to create the event frame.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="eventFrame">The new event frame definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateEventFrameAsync (string webId, PIEventFrame eventFrame)
        {
             ApiResponse<Object> localVarResponse = await CreateEventFrameAsyncWithHttpInfo(webId, eventFrame);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an event frame. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database on which to create the event frame.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="eventFrame">The new event frame definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateEventFrameAsyncWithHttpInfo (string webId, PIEventFrame eventFrame)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateEventFrame");
            // verify the required parameter 'eventFrame' is set
            if (eventFrame == null)
                throw new ApiException(400, "Missing required parameter 'eventFrame' when calling AssetDataApiApi->CreateEventFrame");

            var localVarPath = "/assetdatabases/{webId}/eventframes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (eventFrame != null && eventFrame.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventFrame); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventFrame; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateEventFrame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be created.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityEntry">The new security entry definition.  The full list of allow and deny rights must be supplied.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be created.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be created.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Object</returns>
        public Object CreateSecurityEntry (string webId, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null)
        {
             ApiResponse<Object> localVarResponse = CreateSecurityEntryWithHttpInfo(webId, securityEntry, securityItem, applyToChildren);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be created.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityEntry">The new security entry definition.  The full list of allow and deny rights must be supplied.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be created.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be created.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateSecurityEntryWithHttpInfo (string webId, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateSecurityEntry");
            // verify the required parameter 'securityEntry' is set
            if (securityEntry == null)
                throw new ApiException(400, "Missing required parameter 'securityEntry' when calling AssetDataApiApi->CreateSecurityEntry");

            var localVarPath = "/assetdatabases/{webId}/securityentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (applyToChildren != null) localVarQueryParams.Add("applyToChildren", Configuration.ApiClient.ParameterToString(applyToChildren)); // query parameter
            if (securityEntry != null && securityEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(securityEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityEntry; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecurityEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be created.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityEntry">The new security entry definition.  The full list of allow and deny rights must be supplied.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be created.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be created.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateSecurityEntryAsync (string webId, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null)
        {
             ApiResponse<Object> localVarResponse = await CreateSecurityEntryAsyncWithHttpInfo(webId, securityEntry, securityItem, applyToChildren);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be created.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityEntry">The new security entry definition.  The full list of allow and deny rights must be supplied.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be created.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be created.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateSecurityEntryAsyncWithHttpInfo (string webId, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateSecurityEntry");
            // verify the required parameter 'securityEntry' is set
            if (securityEntry == null)
                throw new ApiException(400, "Missing required parameter 'securityEntry' when calling AssetDataApiApi->CreateSecurityEntry");

            var localVarPath = "/assetdatabases/{webId}/securityentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (applyToChildren != null) localVarQueryParams.Add("applyToChildren", Configuration.ApiClient.ParameterToString(applyToChildren)); // query parameter
            if (securityEntry != null && securityEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(securityEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityEntry; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecurityEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a table on the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="table">The new table definition.</param>
        /// <returns>Object</returns>
        public Object CreateTable (string webId, PITable table)
        {
             ApiResponse<Object> localVarResponse = CreateTableWithHttpInfo(webId, table);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a table on the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="table">The new table definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateTableWithHttpInfo (string webId, PITable table)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateTable");
            // verify the required parameter 'table' is set
            if (table == null)
                throw new ApiException(400, "Missing required parameter 'table' when calling AssetDataApiApi->CreateTable");

            var localVarPath = "/assetdatabases/{webId}/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (table != null && table.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(table); // http body (model) parameter
            }
            else
            {
                localVarPostBody = table; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a table on the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="table">The new table definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateTableAsync (string webId, PITable table)
        {
             ApiResponse<Object> localVarResponse = await CreateTableAsyncWithHttpInfo(webId, table);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a table on the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="table">The new table definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateTableAsyncWithHttpInfo (string webId, PITable table)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateTable");
            // verify the required parameter 'table' is set
            if (table == null)
                throw new ApiException(400, "Missing required parameter 'table' when calling AssetDataApiApi->CreateTable");

            var localVarPath = "/assetdatabases/{webId}/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (table != null && table.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(table); // http body (model) parameter
            }
            else
            {
                localVarPostBody = table; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a table category on the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="tableCategory">The new table category definition.</param>
        /// <returns>Object</returns>
        public Object CreateTableCategory (string webId, PICategory tableCategory)
        {
             ApiResponse<Object> localVarResponse = CreateTableCategoryWithHttpInfo(webId, tableCategory);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a table category on the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="tableCategory">The new table category definition.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > CreateTableCategoryWithHttpInfo (string webId, PICategory tableCategory)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateTableCategory");
            // verify the required parameter 'tableCategory' is set
            if (tableCategory == null)
                throw new ApiException(400, "Missing required parameter 'tableCategory' when calling AssetDataApiApi->CreateTableCategory");

            var localVarPath = "/assetdatabases/{webId}/tablecategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (tableCategory != null && tableCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tableCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tableCategory; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTableCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Create a table category on the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="tableCategory">The new table category definition.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CreateTableCategoryAsync (string webId, PICategory tableCategory)
        {
             ApiResponse<Object> localVarResponse = await CreateTableCategoryAsyncWithHttpInfo(webId, tableCategory);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a table category on the Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database in which to create the table category.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="tableCategory">The new table category definition.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateTableCategoryAsyncWithHttpInfo (string webId, PICategory tableCategory)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->CreateTableCategory");
            // verify the required parameter 'tableCategory' is set
            if (tableCategory == null)
                throw new ApiException(400, "Missing required parameter 'tableCategory' when calling AssetDataApiApi->CreateTableCategory");

            var localVarPath = "/assetdatabases/{webId}/tablecategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (tableCategory != null && tableCategory.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(tableCategory); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tableCategory; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTableCategory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete an asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Object</returns>
        public Object Delete (string webId)
        {
             ApiResponse<Object> localVarResponse = DeleteWithHttpInfo(webId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteWithHttpInfo (string webId)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Delete");

            var localVarPath = "/assetdatabases/{webId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete an asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteAsync (string webId)
        {
             ApiResponse<Object> localVarResponse = await DeleteAsyncWithHttpInfo(webId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAsyncWithHttpInfo (string webId)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Delete");

            var localVarPath = "/assetdatabases/{webId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be deleted.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries to be deleted.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be deleted.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteSecurityEntry (string webId, string name, string securityItem = null, bool? applyToChildren = null)
        {
             ApiResponse<Object> localVarResponse = DeleteSecurityEntryWithHttpInfo(webId, name, securityItem, applyToChildren);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be deleted.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries to be deleted.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be deleted.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteSecurityEntryWithHttpInfo (string webId, string name, string securityItem = null, bool? applyToChildren = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->DeleteSecurityEntry");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AssetDataApiApi->DeleteSecurityEntry");

            var localVarPath = "/assetdatabases/{webId}/securityentries/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (applyToChildren != null) localVarQueryParams.Add("applyToChildren", Configuration.ApiClient.ParameterToString(applyToChildren)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecurityEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Delete a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be deleted.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries to be deleted.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be deleted.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteSecurityEntryAsync (string webId, string name, string securityItem = null, bool? applyToChildren = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteSecurityEntryAsyncWithHttpInfo(webId, name, securityItem, applyToChildren);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be deleted.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries to be deleted.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be deleted.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSecurityEntryAsyncWithHttpInfo (string webId, string name, string securityItem = null, bool? applyToChildren = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->DeleteSecurityEntry");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AssetDataApiApi->DeleteSecurityEntry");

            var localVarPath = "/assetdatabases/{webId}/securityentries/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (applyToChildren != null) localVarQueryParams.Add("applyToChildren", Configuration.ApiClient.ParameterToString(applyToChildren)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecurityEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Export the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="exportMode">Indicates the type of export to perform. The default is &#39;StrongReferences&#39;.  Multiple export modes may be specified by using multiple instances of exportMode.  &lt;see topic&#x3D;\&quot;Export Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*-30d&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <returns>Object</returns>
        public Object Export (string webId, List<string> exportMode = null, string startTime = null, string endTime = null)
        {
             ApiResponse<Object> localVarResponse = ExportWithHttpInfo(webId, exportMode, startTime, endTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="exportMode">Indicates the type of export to perform. The default is &#39;StrongReferences&#39;.  Multiple export modes may be specified by using multiple instances of exportMode.  &lt;see topic&#x3D;\&quot;Export Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*-30d&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ExportWithHttpInfo (string webId, List<string> exportMode = null, string startTime = null, string endTime = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Export");

            var localVarPath = "/assetdatabases/{webId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (exportMode != null) localVarQueryParams.Add("exportMode", Configuration.ApiClient.ParameterToString(exportMode)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Export the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="exportMode">Indicates the type of export to perform. The default is &#39;StrongReferences&#39;.  Multiple export modes may be specified by using multiple instances of exportMode.  &lt;see topic&#x3D;\&quot;Export Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*-30d&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ExportAsync (string webId, List<string> exportMode = null, string startTime = null, string endTime = null)
        {
             ApiResponse<Object> localVarResponse = await ExportAsyncWithHttpInfo(webId, exportMode, startTime, endTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="exportMode">Indicates the type of export to perform. The default is &#39;StrongReferences&#39;.  Multiple export modes may be specified by using multiple instances of exportMode.  &lt;see topic&#x3D;\&quot;Export Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The earliest starting time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*-30d&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The latest ending time for AFEventFrame, AFTransfer, and AFCase objects that may be part of the export.  The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExportAsyncWithHttpInfo (string webId, List<string> exportMode = null, string startTime = null, string endTime = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Export");

            var localVarPath = "/assetdatabases/{webId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (exportMode != null) localVarQueryParams.Add("exportMode", Configuration.ApiClient.ParameterToString(exportMode)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Retrieve analyses based on the specified conditions. Users can search for the analyses based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the  analyses that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search for the analyses.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding analyses. The default is null.  &lt;see topic&#x3D;\&quot;Query String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsAnalysis</returns>
        public PIItemsAnalysis FindAnalyses (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsAnalysis> localVarResponse = FindAnalysesWithHttpInfo(webId, field, query, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve analyses based on the specified conditions. Users can search for the analyses based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the  analyses that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search for the analyses.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding analyses. The default is null.  &lt;see topic&#x3D;\&quot;Query String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsAnalysis</returns>
        public ApiResponse< PIItemsAnalysis > FindAnalysesWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->FindAnalyses");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AssetDataApiApi->FindAnalyses");

            var localVarPath = "/assetdatabases/{webId}/analyses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter
            if (query != null) localVarQueryParams.Add("query", Configuration.ApiClient.ParameterToString(query)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAnalyses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsAnalysis>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsAnalysis) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsAnalysis)));
            
        }

        /// <summary>
        /// Retrieve analyses based on the specified conditions. Users can search for the analyses based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the  analyses that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search for the analyses.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding analyses. The default is null.  &lt;see topic&#x3D;\&quot;Query String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsAnalysis</returns>
        public async System.Threading.Tasks.Task<PIItemsAnalysis> FindAnalysesAsync (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsAnalysis> localVarResponse = await FindAnalysesAsyncWithHttpInfo(webId, field, query, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve analyses based on the specified conditions. Users can search for the analyses based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the  analyses that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search for the analyses.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding analyses. The default is null.  &lt;see topic&#x3D;\&quot;Query String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsAnalysis)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsAnalysis>> FindAnalysesAsyncWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->FindAnalyses");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AssetDataApiApi->FindAnalyses");

            var localVarPath = "/assetdatabases/{webId}/analyses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter
            if (query != null) localVarQueryParams.Add("query", Configuration.ApiClient.ParameterToString(query)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAnalyses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsAnalysis>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsAnalysis) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsAnalysis)));
            
        }

        /// <summary>
        /// Retrieves a list of element attributes matching the specified filters from the specified asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementNameFilter">The element name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementDescriptionFilter">The element description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="elementTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)</param>
        /// <param name="elementType">Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsAttribute</returns>
        public PIItemsAttribute FindElementAttributes (string webId, string elementNameFilter = null, string elementDescriptionFilter = null, string elementCategory = null, string elementTemplate = null, string elementType = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsAttribute> localVarResponse = FindElementAttributesWithHttpInfo(webId, elementNameFilter, elementDescriptionFilter, elementCategory, elementTemplate, elementType, attributeNameFilter, attributeDescriptionFilter, attributeCategory, attributeType, searchFullHierarchy, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of element attributes matching the specified filters from the specified asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementNameFilter">The element name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementDescriptionFilter">The element description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="elementTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)</param>
        /// <param name="elementType">Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsAttribute</returns>
        public ApiResponse< PIItemsAttribute > FindElementAttributesWithHttpInfo (string webId, string elementNameFilter = null, string elementDescriptionFilter = null, string elementCategory = null, string elementTemplate = null, string elementType = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->FindElementAttributes");

            var localVarPath = "/assetdatabases/{webId}/elementattributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (elementNameFilter != null) localVarQueryParams.Add("elementNameFilter", Configuration.ApiClient.ParameterToString(elementNameFilter)); // query parameter
            if (elementDescriptionFilter != null) localVarQueryParams.Add("elementDescriptionFilter", Configuration.ApiClient.ParameterToString(elementDescriptionFilter)); // query parameter
            if (elementCategory != null) localVarQueryParams.Add("elementCategory", Configuration.ApiClient.ParameterToString(elementCategory)); // query parameter
            if (elementTemplate != null) localVarQueryParams.Add("elementTemplate", Configuration.ApiClient.ParameterToString(elementTemplate)); // query parameter
            if (elementType != null) localVarQueryParams.Add("elementType", Configuration.ApiClient.ParameterToString(elementType)); // query parameter
            if (attributeNameFilter != null) localVarQueryParams.Add("attributeNameFilter", Configuration.ApiClient.ParameterToString(attributeNameFilter)); // query parameter
            if (attributeDescriptionFilter != null) localVarQueryParams.Add("attributeDescriptionFilter", Configuration.ApiClient.ParameterToString(attributeDescriptionFilter)); // query parameter
            if (attributeCategory != null) localVarQueryParams.Add("attributeCategory", Configuration.ApiClient.ParameterToString(attributeCategory)); // query parameter
            if (attributeType != null) localVarQueryParams.Add("attributeType", Configuration.ApiClient.ParameterToString(attributeType)); // query parameter
            if (searchFullHierarchy != null) localVarQueryParams.Add("searchFullHierarchy", Configuration.ApiClient.ParameterToString(searchFullHierarchy)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindElementAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsAttribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsAttribute) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsAttribute)));
            
        }

        /// <summary>
        /// Retrieves a list of element attributes matching the specified filters from the specified asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementNameFilter">The element name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementDescriptionFilter">The element description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="elementTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)</param>
        /// <param name="elementType">Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsAttribute</returns>
        public async System.Threading.Tasks.Task<PIItemsAttribute> FindElementAttributesAsync (string webId, string elementNameFilter = null, string elementDescriptionFilter = null, string elementCategory = null, string elementTemplate = null, string elementType = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsAttribute> localVarResponse = await FindElementAttributesAsyncWithHttpInfo(webId, elementNameFilter, elementDescriptionFilter, elementCategory, elementTemplate, elementType, attributeNameFilter, attributeDescriptionFilter, attributeCategory, attributeType, searchFullHierarchy, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a list of element attributes matching the specified filters from the specified asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="elementNameFilter">The element name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementDescriptionFilter">The element description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="elementCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="elementTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template. The default is no filter. (optional)</param>
        /// <param name="elementType">Specify that the element of the returned attributes must have this AFElementType. The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsAttribute)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsAttribute>> FindElementAttributesAsyncWithHttpInfo (string webId, string elementNameFilter = null, string elementDescriptionFilter = null, string elementCategory = null, string elementTemplate = null, string elementType = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->FindElementAttributes");

            var localVarPath = "/assetdatabases/{webId}/elementattributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (elementNameFilter != null) localVarQueryParams.Add("elementNameFilter", Configuration.ApiClient.ParameterToString(elementNameFilter)); // query parameter
            if (elementDescriptionFilter != null) localVarQueryParams.Add("elementDescriptionFilter", Configuration.ApiClient.ParameterToString(elementDescriptionFilter)); // query parameter
            if (elementCategory != null) localVarQueryParams.Add("elementCategory", Configuration.ApiClient.ParameterToString(elementCategory)); // query parameter
            if (elementTemplate != null) localVarQueryParams.Add("elementTemplate", Configuration.ApiClient.ParameterToString(elementTemplate)); // query parameter
            if (elementType != null) localVarQueryParams.Add("elementType", Configuration.ApiClient.ParameterToString(elementType)); // query parameter
            if (attributeNameFilter != null) localVarQueryParams.Add("attributeNameFilter", Configuration.ApiClient.ParameterToString(attributeNameFilter)); // query parameter
            if (attributeDescriptionFilter != null) localVarQueryParams.Add("attributeDescriptionFilter", Configuration.ApiClient.ParameterToString(attributeDescriptionFilter)); // query parameter
            if (attributeCategory != null) localVarQueryParams.Add("attributeCategory", Configuration.ApiClient.ParameterToString(attributeCategory)); // query parameter
            if (attributeType != null) localVarQueryParams.Add("attributeType", Configuration.ApiClient.ParameterToString(attributeType)); // query parameter
            if (searchFullHierarchy != null) localVarQueryParams.Add("searchFullHierarchy", Configuration.ApiClient.ParameterToString(searchFullHierarchy)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindElementAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsAttribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsAttribute) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsAttribute)));
            
        }

        /// <summary>
        /// Retrieves a list of event frame attributes matching the specified filters from the specified asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated when searching for event frames.          The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">A string representing the earliest starting time for the event frames to be matched.   startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">A string representing the latest ending time for the event frames to be matched.   The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameNameFilter">The event frame name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameDescriptionFilter">The event frame description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="eventFrameTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template.  The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsAttribute</returns>
        public PIItemsAttribute FindEventFrameAttributes (string webId, string searchMode = null, string startTime = null, string endTime = null, string eventFrameNameFilter = null, string eventFrameDescriptionFilter = null, string referencedElementNameFilter = null, string eventFrameCategory = null, string eventFrameTemplate = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsAttribute> localVarResponse = FindEventFrameAttributesWithHttpInfo(webId, searchMode, startTime, endTime, eventFrameNameFilter, eventFrameDescriptionFilter, referencedElementNameFilter, eventFrameCategory, eventFrameTemplate, attributeNameFilter, attributeDescriptionFilter, attributeCategory, attributeType, searchFullHierarchy, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of event frame attributes matching the specified filters from the specified asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated when searching for event frames.          The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">A string representing the earliest starting time for the event frames to be matched.   startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">A string representing the latest ending time for the event frames to be matched.   The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameNameFilter">The event frame name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameDescriptionFilter">The event frame description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="eventFrameTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template.  The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsAttribute</returns>
        public ApiResponse< PIItemsAttribute > FindEventFrameAttributesWithHttpInfo (string webId, string searchMode = null, string startTime = null, string endTime = null, string eventFrameNameFilter = null, string eventFrameDescriptionFilter = null, string referencedElementNameFilter = null, string eventFrameCategory = null, string eventFrameTemplate = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->FindEventFrameAttributes");

            var localVarPath = "/assetdatabases/{webId}/eventframeattributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (searchMode != null) localVarQueryParams.Add("searchMode", Configuration.ApiClient.ParameterToString(searchMode)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (eventFrameNameFilter != null) localVarQueryParams.Add("eventFrameNameFilter", Configuration.ApiClient.ParameterToString(eventFrameNameFilter)); // query parameter
            if (eventFrameDescriptionFilter != null) localVarQueryParams.Add("eventFrameDescriptionFilter", Configuration.ApiClient.ParameterToString(eventFrameDescriptionFilter)); // query parameter
            if (referencedElementNameFilter != null) localVarQueryParams.Add("referencedElementNameFilter", Configuration.ApiClient.ParameterToString(referencedElementNameFilter)); // query parameter
            if (eventFrameCategory != null) localVarQueryParams.Add("eventFrameCategory", Configuration.ApiClient.ParameterToString(eventFrameCategory)); // query parameter
            if (eventFrameTemplate != null) localVarQueryParams.Add("eventFrameTemplate", Configuration.ApiClient.ParameterToString(eventFrameTemplate)); // query parameter
            if (attributeNameFilter != null) localVarQueryParams.Add("attributeNameFilter", Configuration.ApiClient.ParameterToString(attributeNameFilter)); // query parameter
            if (attributeDescriptionFilter != null) localVarQueryParams.Add("attributeDescriptionFilter", Configuration.ApiClient.ParameterToString(attributeDescriptionFilter)); // query parameter
            if (attributeCategory != null) localVarQueryParams.Add("attributeCategory", Configuration.ApiClient.ParameterToString(attributeCategory)); // query parameter
            if (attributeType != null) localVarQueryParams.Add("attributeType", Configuration.ApiClient.ParameterToString(attributeType)); // query parameter
            if (searchFullHierarchy != null) localVarQueryParams.Add("searchFullHierarchy", Configuration.ApiClient.ParameterToString(searchFullHierarchy)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEventFrameAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsAttribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsAttribute) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsAttribute)));
            
        }

        /// <summary>
        /// Retrieves a list of event frame attributes matching the specified filters from the specified asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated when searching for event frames.          The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">A string representing the earliest starting time for the event frames to be matched.   startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">A string representing the latest ending time for the event frames to be matched.   The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameNameFilter">The event frame name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameDescriptionFilter">The event frame description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="eventFrameTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template.  The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsAttribute</returns>
        public async System.Threading.Tasks.Task<PIItemsAttribute> FindEventFrameAttributesAsync (string webId, string searchMode = null, string startTime = null, string endTime = null, string eventFrameNameFilter = null, string eventFrameDescriptionFilter = null, string referencedElementNameFilter = null, string eventFrameCategory = null, string eventFrameTemplate = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsAttribute> localVarResponse = await FindEventFrameAttributesAsyncWithHttpInfo(webId, searchMode, startTime, endTime, eventFrameNameFilter, eventFrameDescriptionFilter, referencedElementNameFilter, eventFrameCategory, eventFrameTemplate, attributeNameFilter, attributeDescriptionFilter, attributeCategory, attributeType, searchFullHierarchy, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a list of event frame attributes matching the specified filters from the specified asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated when searching for event frames.          The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">A string representing the earliest starting time for the event frames to be matched.   startTime must be less than or equal to the endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">A string representing the latest ending time for the event frames to be matched.   The endTime must be greater than or equal to the startTime. The default is &#39;*&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameNameFilter">The event frame name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameDescriptionFilter">The event frame description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="eventFrameCategory">Specify that the owner of the returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="eventFrameTemplate">Specify that the owner of the returned attributes must have this template or a template derived from this template.  The default is no filter. (optional)</param>
        /// <param name="attributeNameFilter">The attribute name filter string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeDescriptionFilter">The attribute description filter string used for finding objects.  Only the first 440 characters of the description will be searched.  For Asset Servers older than 2.7, a 400 status code (Bad Request) will be returned if this parameter is specified.  The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="attributeCategory">Specify that returned attributes must have this category. The default is no filter. (optional)</param>
        /// <param name="attributeType">Specify that returned attributes&#39; value type must be this value type. The default is no filter. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than immediate children of the given resource.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned (the page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsAttribute)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsAttribute>> FindEventFrameAttributesAsyncWithHttpInfo (string webId, string searchMode = null, string startTime = null, string endTime = null, string eventFrameNameFilter = null, string eventFrameDescriptionFilter = null, string referencedElementNameFilter = null, string eventFrameCategory = null, string eventFrameTemplate = null, string attributeNameFilter = null, string attributeDescriptionFilter = null, string attributeCategory = null, string attributeType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->FindEventFrameAttributes");

            var localVarPath = "/assetdatabases/{webId}/eventframeattributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (searchMode != null) localVarQueryParams.Add("searchMode", Configuration.ApiClient.ParameterToString(searchMode)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (eventFrameNameFilter != null) localVarQueryParams.Add("eventFrameNameFilter", Configuration.ApiClient.ParameterToString(eventFrameNameFilter)); // query parameter
            if (eventFrameDescriptionFilter != null) localVarQueryParams.Add("eventFrameDescriptionFilter", Configuration.ApiClient.ParameterToString(eventFrameDescriptionFilter)); // query parameter
            if (referencedElementNameFilter != null) localVarQueryParams.Add("referencedElementNameFilter", Configuration.ApiClient.ParameterToString(referencedElementNameFilter)); // query parameter
            if (eventFrameCategory != null) localVarQueryParams.Add("eventFrameCategory", Configuration.ApiClient.ParameterToString(eventFrameCategory)); // query parameter
            if (eventFrameTemplate != null) localVarQueryParams.Add("eventFrameTemplate", Configuration.ApiClient.ParameterToString(eventFrameTemplate)); // query parameter
            if (attributeNameFilter != null) localVarQueryParams.Add("attributeNameFilter", Configuration.ApiClient.ParameterToString(attributeNameFilter)); // query parameter
            if (attributeDescriptionFilter != null) localVarQueryParams.Add("attributeDescriptionFilter", Configuration.ApiClient.ParameterToString(attributeDescriptionFilter)); // query parameter
            if (attributeCategory != null) localVarQueryParams.Add("attributeCategory", Configuration.ApiClient.ParameterToString(attributeCategory)); // query parameter
            if (attributeType != null) localVarQueryParams.Add("attributeType", Configuration.ApiClient.ParameterToString(attributeType)); // query parameter
            if (searchFullHierarchy != null) localVarQueryParams.Add("searchFullHierarchy", Configuration.ApiClient.ParameterToString(searchFullHierarchy)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEventFrameAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsAttribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsAttribute) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsAttribute)));
            
        }

        /// <summary>
        /// Retrieve an Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIAssetDatabase</returns>
        public PIAssetDatabase Get (string webId, string selectedFields = null)
        {
             ApiResponse<PIAssetDatabase> localVarResponse = GetWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIAssetDatabase</returns>
        public ApiResponse< PIAssetDatabase > GetWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Get");

            var localVarPath = "/assetdatabases/{webId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIAssetDatabase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIAssetDatabase) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIAssetDatabase)));
            
        }

        /// <summary>
        /// Retrieve an Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIAssetDatabase</returns>
        public async System.Threading.Tasks.Task<PIAssetDatabase> GetAsync (string webId, string selectedFields = null)
        {
             ApiResponse<PIAssetDatabase> localVarResponse = await GetAsyncWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIAssetDatabase)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIAssetDatabase>> GetAsyncWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Get");

            var localVarPath = "/assetdatabases/{webId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIAssetDatabase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIAssetDatabase) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIAssetDatabase)));
            
        }

        /// <summary>
        /// Retrieve analysis categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsCategory</returns>
        public PIItemsCategory GetAnalysisCategories (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsCategory> localVarResponse = GetAnalysisCategoriesWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve analysis categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsCategory</returns>
        public ApiResponse< PIItemsCategory > GetAnalysisCategoriesWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetAnalysisCategories");

            var localVarPath = "/assetdatabases/{webId}/analysiscategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalysisCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsCategory)));
            
        }

        /// <summary>
        /// Retrieve analysis categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsCategory</returns>
        public async System.Threading.Tasks.Task<PIItemsCategory> GetAnalysisCategoriesAsync (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsCategory> localVarResponse = await GetAnalysisCategoriesAsyncWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve analysis categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsCategory>> GetAnalysisCategoriesAsyncWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetAnalysisCategories");

            var localVarPath = "/assetdatabases/{webId}/analysiscategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalysisCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsCategory)));
            
        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.AnalysisTemplateController\&quot;&gt;analysis templates&lt;/see&gt; based on the specified criteria.  By default, all analysis templates in the specified Asset Database are returned. Users can search for the analysis templates based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsAnalysisTemplate</returns>
        public PIItemsAnalysisTemplate GetAnalysisTemplates (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsAnalysisTemplate> localVarResponse = GetAnalysisTemplatesWithHttpInfo(webId, field, query, sortField, sortOrder, maxCount, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.AnalysisTemplateController\&quot;&gt;analysis templates&lt;/see&gt; based on the specified criteria.  By default, all analysis templates in the specified Asset Database are returned. Users can search for the analysis templates based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsAnalysisTemplate</returns>
        public ApiResponse< PIItemsAnalysisTemplate > GetAnalysisTemplatesWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetAnalysisTemplates");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AssetDataApiApi->GetAnalysisTemplates");

            var localVarPath = "/assetdatabases/{webId}/analysistemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter
            if (query != null) localVarQueryParams.Add("query", Configuration.ApiClient.ParameterToString(query)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalysisTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsAnalysisTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsAnalysisTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsAnalysisTemplate)));
            
        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.AnalysisTemplateController\&quot;&gt;analysis templates&lt;/see&gt; based on the specified criteria.  By default, all analysis templates in the specified Asset Database are returned. Users can search for the analysis templates based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsAnalysisTemplate</returns>
        public async System.Threading.Tasks.Task<PIItemsAnalysisTemplate> GetAnalysisTemplatesAsync (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsAnalysisTemplate> localVarResponse = await GetAnalysisTemplatesAsyncWithHttpInfo(webId, field, query, sortField, sortOrder, maxCount, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.AnalysisTemplateController\&quot;&gt;analysis templates&lt;/see&gt; based on the specified criteria.  By default, all analysis templates in the specified Asset Database are returned. Users can search for the analysis templates based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;. (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsAnalysisTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsAnalysisTemplate>> GetAnalysisTemplatesAsyncWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetAnalysisTemplates");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AssetDataApiApi->GetAnalysisTemplates");

            var localVarPath = "/assetdatabases/{webId}/analysistemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter
            if (query != null) localVarQueryParams.Add("query", Configuration.ApiClient.ParameterToString(query)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAnalysisTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsAnalysisTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsAnalysisTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsAnalysisTemplate)));
            
        }

        /// <summary>
        /// Retrieve attribute categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsCategory</returns>
        public PIItemsCategory GetAttributeCategories (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsCategory> localVarResponse = GetAttributeCategoriesWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve attribute categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsCategory</returns>
        public ApiResponse< PIItemsCategory > GetAttributeCategoriesWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetAttributeCategories");

            var localVarPath = "/assetdatabases/{webId}/attributecategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributeCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsCategory)));
            
        }

        /// <summary>
        /// Retrieve attribute categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsCategory</returns>
        public async System.Threading.Tasks.Task<PIItemsCategory> GetAttributeCategoriesAsync (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsCategory> localVarResponse = await GetAttributeCategoriesAsyncWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve attribute categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsCategory>> GetAttributeCategoriesAsyncWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetAttributeCategories");

            var localVarPath = "/assetdatabases/{webId}/attributecategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributeCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsCategory)));
            
        }

        /// <summary>
        /// Retrieve an Asset Database by path. This method returns an asset database based on the hierarchical path associated with it, and should be used when a path  has been received from a separate part of the PI System for use in the PI Web API.  Users should primarily search  with the WebID when available.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the database. &lt;see topic&#x3D;\&quot;Path-Syntax\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIAssetDatabase</returns>
        public PIAssetDatabase GetByPath (string path, string selectedFields = null)
        {
             ApiResponse<PIAssetDatabase> localVarResponse = GetByPathWithHttpInfo(path, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Asset Database by path. This method returns an asset database based on the hierarchical path associated with it, and should be used when a path  has been received from a separate part of the PI System for use in the PI Web API.  Users should primarily search  with the WebID when available.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the database. &lt;see topic&#x3D;\&quot;Path-Syntax\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIAssetDatabase</returns>
        public ApiResponse< PIAssetDatabase > GetByPathWithHttpInfo (string path, string selectedFields = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling AssetDataApiApi->GetByPath");

            var localVarPath = "/assetdatabases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (path != null) localVarQueryParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIAssetDatabase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIAssetDatabase) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIAssetDatabase)));
            
        }

        /// <summary>
        /// Retrieve an Asset Database by path. This method returns an asset database based on the hierarchical path associated with it, and should be used when a path  has been received from a separate part of the PI System for use in the PI Web API.  Users should primarily search  with the WebID when available.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the database. &lt;see topic&#x3D;\&quot;Path-Syntax\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIAssetDatabase</returns>
        public async System.Threading.Tasks.Task<PIAssetDatabase> GetByPathAsync (string path, string selectedFields = null)
        {
             ApiResponse<PIAssetDatabase> localVarResponse = await GetByPathAsyncWithHttpInfo(path, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an Asset Database by path. This method returns an asset database based on the hierarchical path associated with it, and should be used when a path  has been received from a separate part of the PI System for use in the PI Web API.  Users should primarily search  with the WebID when available.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The path to the database. &lt;see topic&#x3D;\&quot;Path-Syntax\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIAssetDatabase)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIAssetDatabase>> GetByPathAsyncWithHttpInfo (string path, string selectedFields = null)
        {
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling AssetDataApiApi->GetByPath");

            var localVarPath = "/assetdatabases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (path != null) localVarQueryParams.Add("path", Configuration.ApiClient.ParameterToString(path)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIAssetDatabase>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIAssetDatabase) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIAssetDatabase)));
            
        }

        /// <summary>
        /// Retrieve element categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsCategory</returns>
        public PIItemsCategory GetElementCategories (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsCategory> localVarResponse = GetElementCategoriesWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve element categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsCategory</returns>
        public ApiResponse< PIItemsCategory > GetElementCategoriesWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetElementCategories");

            var localVarPath = "/assetdatabases/{webId}/elementcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElementCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsCategory)));
            
        }

        /// <summary>
        /// Retrieve element categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsCategory</returns>
        public async System.Threading.Tasks.Task<PIItemsCategory> GetElementCategoriesAsync (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsCategory> localVarResponse = await GetElementCategoriesAsyncWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve element categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsCategory>> GetElementCategoriesAsyncWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetElementCategories");

            var localVarPath = "/assetdatabases/{webId}/elementcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElementCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsCategory)));
            
        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;element templates&lt;/see&gt; based on the specified criteria.  Only templates of instance type \&quot;Element\&quot; and \&quot;EventFrame\&quot; are returned.  By default, all element and event frame templates in the specified Asset Database are returned. Users can search for the element and event frame template based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsElementTemplate</returns>
        public PIItemsElementTemplate GetElementTemplates (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsElementTemplate> localVarResponse = GetElementTemplatesWithHttpInfo(webId, field, query, sortField, sortOrder, maxCount, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;element templates&lt;/see&gt; based on the specified criteria.  Only templates of instance type \&quot;Element\&quot; and \&quot;EventFrame\&quot; are returned.  By default, all element and event frame templates in the specified Asset Database are returned. Users can search for the element and event frame template based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsElementTemplate</returns>
        public ApiResponse< PIItemsElementTemplate > GetElementTemplatesWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetElementTemplates");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AssetDataApiApi->GetElementTemplates");

            var localVarPath = "/assetdatabases/{webId}/elementtemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter
            if (query != null) localVarQueryParams.Add("query", Configuration.ApiClient.ParameterToString(query)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElementTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsElementTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsElementTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsElementTemplate)));
            
        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;element templates&lt;/see&gt; based on the specified criteria.  Only templates of instance type \&quot;Element\&quot; and \&quot;EventFrame\&quot; are returned.  By default, all element and event frame templates in the specified Asset Database are returned. Users can search for the element and event frame template based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsElementTemplate</returns>
        public async System.Threading.Tasks.Task<PIItemsElementTemplate> GetElementTemplatesAsync (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsElementTemplate> localVarResponse = await GetElementTemplatesAsyncWithHttpInfo(webId, field, query, sortField, sortOrder, maxCount, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.ElementTemplateController\&quot;&gt;element templates&lt;/see&gt; based on the specified criteria.  Only templates of instance type \&quot;Element\&quot; and \&quot;EventFrame\&quot; are returned.  By default, all element and event frame templates in the specified Asset Database are returned. Users can search for the element and event frame template based on specific search parameters.   If no parameters are specified in the search, the default values for each parameter will   be used and will return the templates that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to search. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="field">Specifies which of the object&#39;s properties are searched. &lt;see topic&#x3D;\&quot;Search Field\&quot; /&gt;  Multiple search fields may be specified with multiple instances of the parameter.  The default is &#39;Name&#39;.</param>
        /// <param name="query">The query string used for finding objects. The default is no query string.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsElementTemplate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsElementTemplate>> GetElementTemplatesAsyncWithHttpInfo (string webId, List<string> field, string query = null, string sortField = null, string sortOrder = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetElementTemplates");
            // verify the required parameter 'field' is set
            if (field == null)
                throw new ApiException(400, "Missing required parameter 'field' when calling AssetDataApiApi->GetElementTemplates");

            var localVarPath = "/assetdatabases/{webId}/elementtemplates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (field != null) localVarQueryParams.Add("field", Configuration.ApiClient.ParameterToString(field)); // query parameter
            if (query != null) localVarQueryParams.Add("query", Configuration.ApiClient.ParameterToString(query)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElementTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsElementTemplate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsElementTemplate) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsElementTemplate)));
            
        }

        /// <summary>
        /// Retrieve elements based on the specified conditions.  By default, this method selects immediate children of the specified asset database. Users can search for the elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than the immediate children of the searchRoot.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsElement</returns>
        public PIItemsElement GetElements (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsElement> localVarResponse = GetElementsWithHttpInfo(webId, nameFilter, descriptionFilter, categoryName, templateName, elementType, searchFullHierarchy, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve elements based on the specified conditions.  By default, this method selects immediate children of the specified asset database. Users can search for the elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than the immediate children of the searchRoot.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsElement</returns>
        public ApiResponse< PIItemsElement > GetElementsWithHttpInfo (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetElements");

            var localVarPath = "/assetdatabases/{webId}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (nameFilter != null) localVarQueryParams.Add("nameFilter", Configuration.ApiClient.ParameterToString(nameFilter)); // query parameter
            if (descriptionFilter != null) localVarQueryParams.Add("descriptionFilter", Configuration.ApiClient.ParameterToString(descriptionFilter)); // query parameter
            if (categoryName != null) localVarQueryParams.Add("categoryName", Configuration.ApiClient.ParameterToString(categoryName)); // query parameter
            if (templateName != null) localVarQueryParams.Add("templateName", Configuration.ApiClient.ParameterToString(templateName)); // query parameter
            if (elementType != null) localVarQueryParams.Add("elementType", Configuration.ApiClient.ParameterToString(elementType)); // query parameter
            if (searchFullHierarchy != null) localVarQueryParams.Add("searchFullHierarchy", Configuration.ApiClient.ParameterToString(searchFullHierarchy)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsElement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsElement)));
            
        }

        /// <summary>
        /// Retrieve elements based on the specified conditions.  By default, this method selects immediate children of the specified asset database. Users can search for the elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than the immediate children of the searchRoot.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsElement</returns>
        public async System.Threading.Tasks.Task<PIItemsElement> GetElementsAsync (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsElement> localVarResponse = await GetElementsAsyncWithHttpInfo(webId, nameFilter, descriptionFilter, categoryName, templateName, elementType, searchFullHierarchy, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve elements based on the specified conditions.  By default, this method selects immediate children of the specified asset database. Users can search for the elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="searchFullHierarchy">Specifies if the search should include objects nested further than the immediate children of the searchRoot.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsElement>> GetElementsAsyncWithHttpInfo (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetElements");

            var localVarPath = "/assetdatabases/{webId}/elements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (nameFilter != null) localVarQueryParams.Add("nameFilter", Configuration.ApiClient.ParameterToString(nameFilter)); // query parameter
            if (descriptionFilter != null) localVarQueryParams.Add("descriptionFilter", Configuration.ApiClient.ParameterToString(descriptionFilter)); // query parameter
            if (categoryName != null) localVarQueryParams.Add("categoryName", Configuration.ApiClient.ParameterToString(categoryName)); // query parameter
            if (templateName != null) localVarQueryParams.Add("templateName", Configuration.ApiClient.ParameterToString(templateName)); // query parameter
            if (elementType != null) localVarQueryParams.Add("elementType", Configuration.ApiClient.ParameterToString(elementType)); // query parameter
            if (searchFullHierarchy != null) localVarQueryParams.Add("searchFullHierarchy", Configuration.ApiClient.ParameterToString(searchFullHierarchy)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsElement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsElement)));
            
        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration sets&lt;/see&gt; for given asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsEnumerationSet</returns>
        public PIItemsEnumerationSet GetEnumerationSets (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsEnumerationSet> localVarResponse = GetEnumerationSetsWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration sets&lt;/see&gt; for given asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsEnumerationSet</returns>
        public ApiResponse< PIItemsEnumerationSet > GetEnumerationSetsWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetEnumerationSets");

            var localVarPath = "/assetdatabases/{webId}/enumerationsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnumerationSets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsEnumerationSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsEnumerationSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsEnumerationSet)));
            
        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration sets&lt;/see&gt; for given asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsEnumerationSet</returns>
        public async System.Threading.Tasks.Task<PIItemsEnumerationSet> GetEnumerationSetsAsync (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsEnumerationSet> localVarResponse = await GetEnumerationSetsAsyncWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve &lt;see cref&#x3D;\&quot;T:OSIsoft.REST.Controllers.EnumerationSetController\&quot;&gt;enumeration sets&lt;/see&gt; for given asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsEnumerationSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsEnumerationSet>> GetEnumerationSetsAsyncWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetEnumerationSets");

            var localVarPath = "/assetdatabases/{webId}/enumerationsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEnumerationSets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsEnumerationSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsEnumerationSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsEnumerationSet)));
            
        }

        /// <summary>
        /// Retrieve event frames based on the specified conditions. By default, returns  all children of the specified root resource with a start time in the past 8 hours. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated  when searching for event frame objects to be included in the returned collection.  If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of  endTime, sortField, or sortOrder may be specified.  The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The starting time for the search. startTime must be less than or equal to the  endTime. The searchMode parameter will control whether the  comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The ending time for the search. The endTime must be greater than or equal to  the startTime. The searchMode parameter will control whether  the comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*&#39; if searchMode is not one of the  &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for finding event frames. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned event frames must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned event frames must have this template or a template derived from this template.  The default is no template filter. Specify this parameter by name. (optional)</param>
        /// <param name="referencedElementTemplateName">Specify that returned event frames must have an element in the event frame&#39;s referenced elements  collection that derives from the template. Specify this parameter by name. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies whether the search should include objects nested further than the immediate children of the  search root. The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsEventFrame</returns>
        public PIItemsEventFrame GetEventFrames (string webId, string searchMode = null, string startTime = null, string endTime = null, string nameFilter = null, string referencedElementNameFilter = null, string categoryName = null, string templateName = null, string referencedElementTemplateName = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsEventFrame> localVarResponse = GetEventFramesWithHttpInfo(webId, searchMode, startTime, endTime, nameFilter, referencedElementNameFilter, categoryName, templateName, referencedElementTemplateName, searchFullHierarchy, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve event frames based on the specified conditions. By default, returns  all children of the specified root resource with a start time in the past 8 hours. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated  when searching for event frame objects to be included in the returned collection.  If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of  endTime, sortField, or sortOrder may be specified.  The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The starting time for the search. startTime must be less than or equal to the  endTime. The searchMode parameter will control whether the  comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The ending time for the search. The endTime must be greater than or equal to  the startTime. The searchMode parameter will control whether  the comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*&#39; if searchMode is not one of the  &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for finding event frames. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned event frames must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned event frames must have this template or a template derived from this template.  The default is no template filter. Specify this parameter by name. (optional)</param>
        /// <param name="referencedElementTemplateName">Specify that returned event frames must have an element in the event frame&#39;s referenced elements  collection that derives from the template. Specify this parameter by name. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies whether the search should include objects nested further than the immediate children of the  search root. The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsEventFrame</returns>
        public ApiResponse< PIItemsEventFrame > GetEventFramesWithHttpInfo (string webId, string searchMode = null, string startTime = null, string endTime = null, string nameFilter = null, string referencedElementNameFilter = null, string categoryName = null, string templateName = null, string referencedElementTemplateName = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetEventFrames");

            var localVarPath = "/assetdatabases/{webId}/eventframes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (searchMode != null) localVarQueryParams.Add("searchMode", Configuration.ApiClient.ParameterToString(searchMode)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (nameFilter != null) localVarQueryParams.Add("nameFilter", Configuration.ApiClient.ParameterToString(nameFilter)); // query parameter
            if (referencedElementNameFilter != null) localVarQueryParams.Add("referencedElementNameFilter", Configuration.ApiClient.ParameterToString(referencedElementNameFilter)); // query parameter
            if (categoryName != null) localVarQueryParams.Add("categoryName", Configuration.ApiClient.ParameterToString(categoryName)); // query parameter
            if (templateName != null) localVarQueryParams.Add("templateName", Configuration.ApiClient.ParameterToString(templateName)); // query parameter
            if (referencedElementTemplateName != null) localVarQueryParams.Add("referencedElementTemplateName", Configuration.ApiClient.ParameterToString(referencedElementTemplateName)); // query parameter
            if (searchFullHierarchy != null) localVarQueryParams.Add("searchFullHierarchy", Configuration.ApiClient.ParameterToString(searchFullHierarchy)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventFrames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsEventFrame>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsEventFrame) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsEventFrame)));
            
        }

        /// <summary>
        /// Retrieve event frames based on the specified conditions. By default, returns  all children of the specified root resource with a start time in the past 8 hours. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated  when searching for event frame objects to be included in the returned collection.  If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of  endTime, sortField, or sortOrder may be specified.  The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The starting time for the search. startTime must be less than or equal to the  endTime. The searchMode parameter will control whether the  comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The ending time for the search. The endTime must be greater than or equal to  the startTime. The searchMode parameter will control whether  the comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*&#39; if searchMode is not one of the  &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for finding event frames. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned event frames must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned event frames must have this template or a template derived from this template.  The default is no template filter. Specify this parameter by name. (optional)</param>
        /// <param name="referencedElementTemplateName">Specify that returned event frames must have an element in the event frame&#39;s referenced elements  collection that derives from the template. Specify this parameter by name. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies whether the search should include objects nested further than the immediate children of the  search root. The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsEventFrame</returns>
        public async System.Threading.Tasks.Task<PIItemsEventFrame> GetEventFramesAsync (string webId, string searchMode = null, string startTime = null, string endTime = null, string nameFilter = null, string referencedElementNameFilter = null, string categoryName = null, string templateName = null, string referencedElementTemplateName = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsEventFrame> localVarResponse = await GetEventFramesAsyncWithHttpInfo(webId, searchMode, startTime, endTime, nameFilter, referencedElementNameFilter, categoryName, templateName, referencedElementTemplateName, searchFullHierarchy, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve event frames based on the specified conditions. By default, returns  all children of the specified root resource with a start time in the past 8 hours. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="searchMode">Determines how the startTime and endTime parameters are treated  when searching for event frame objects to be included in the returned collection.  If this parameter is one of the &#39;Backward*&#39; or &#39;Forward*&#39; values, none of  endTime, sortField, or sortOrder may be specified.  The default is &#39;Overlapped&#39;.  &lt;see topic&#x3D;\&quot;Search-Mode\&quot; /&gt; (optional)</param>
        /// <param name="startTime">The starting time for the search. startTime must be less than or equal to the  endTime. The searchMode parameter will control whether the  comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*-8h&#39;.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="endTime">The ending time for the search. The endTime must be greater than or equal to  the startTime. The searchMode parameter will control whether  the comparison will be performed against the event frame&#39;s startTime or  endTime. The default is &#39;*&#39; if searchMode is not one of the  &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Time-Strings\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for finding event frames. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="referencedElementNameFilter">The name query string which must match the name of a referenced element. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned event frames must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned event frames must have this template or a template derived from this template.  The default is no template filter. Specify this parameter by name. (optional)</param>
        /// <param name="referencedElementTemplateName">Specify that returned event frames must have an element in the event frame&#39;s referenced elements  collection that derives from the template. Specify this parameter by name. (optional)</param>
        /// <param name="searchFullHierarchy">Specifies whether the search should include objects nested further than the immediate children of the  search root. The default is &#39;false&#39;. (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;  if searchMode is not one of the &#39;Backward*&#39; or &#39;Forward*&#39; values.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsEventFrame)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsEventFrame>> GetEventFramesAsyncWithHttpInfo (string webId, string searchMode = null, string startTime = null, string endTime = null, string nameFilter = null, string referencedElementNameFilter = null, string categoryName = null, string templateName = null, string referencedElementTemplateName = null, bool? searchFullHierarchy = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetEventFrames");

            var localVarPath = "/assetdatabases/{webId}/eventframes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (searchMode != null) localVarQueryParams.Add("searchMode", Configuration.ApiClient.ParameterToString(searchMode)); // query parameter
            if (startTime != null) localVarQueryParams.Add("startTime", Configuration.ApiClient.ParameterToString(startTime)); // query parameter
            if (endTime != null) localVarQueryParams.Add("endTime", Configuration.ApiClient.ParameterToString(endTime)); // query parameter
            if (nameFilter != null) localVarQueryParams.Add("nameFilter", Configuration.ApiClient.ParameterToString(nameFilter)); // query parameter
            if (referencedElementNameFilter != null) localVarQueryParams.Add("referencedElementNameFilter", Configuration.ApiClient.ParameterToString(referencedElementNameFilter)); // query parameter
            if (categoryName != null) localVarQueryParams.Add("categoryName", Configuration.ApiClient.ParameterToString(categoryName)); // query parameter
            if (templateName != null) localVarQueryParams.Add("templateName", Configuration.ApiClient.ParameterToString(templateName)); // query parameter
            if (referencedElementTemplateName != null) localVarQueryParams.Add("referencedElementTemplateName", Configuration.ApiClient.ParameterToString(referencedElementTemplateName)); // query parameter
            if (searchFullHierarchy != null) localVarQueryParams.Add("searchFullHierarchy", Configuration.ApiClient.ParameterToString(searchFullHierarchy)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventFrames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsEventFrame>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsEventFrame) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsEventFrame)));
            
        }

        /// <summary>
        /// Retrieve referenced elements based on the specified conditions.  By default, this method selects all referenced elements at the root level of the asset database. Users can search for the referenced elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the resource to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsElement</returns>
        public PIItemsElement GetReferencedElements (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsElement> localVarResponse = GetReferencedElementsWithHttpInfo(webId, nameFilter, descriptionFilter, categoryName, templateName, elementType, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve referenced elements based on the specified conditions.  By default, this method selects all referenced elements at the root level of the asset database. Users can search for the referenced elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the resource to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsElement</returns>
        public ApiResponse< PIItemsElement > GetReferencedElementsWithHttpInfo (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetReferencedElements");

            var localVarPath = "/assetdatabases/{webId}/referencedelements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (nameFilter != null) localVarQueryParams.Add("nameFilter", Configuration.ApiClient.ParameterToString(nameFilter)); // query parameter
            if (descriptionFilter != null) localVarQueryParams.Add("descriptionFilter", Configuration.ApiClient.ParameterToString(descriptionFilter)); // query parameter
            if (categoryName != null) localVarQueryParams.Add("categoryName", Configuration.ApiClient.ParameterToString(categoryName)); // query parameter
            if (templateName != null) localVarQueryParams.Add("templateName", Configuration.ApiClient.ParameterToString(templateName)); // query parameter
            if (elementType != null) localVarQueryParams.Add("elementType", Configuration.ApiClient.ParameterToString(elementType)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferencedElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsElement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsElement)));
            
        }

        /// <summary>
        /// Retrieve referenced elements based on the specified conditions.  By default, this method selects all referenced elements at the root level of the asset database. Users can search for the referenced elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the resource to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsElement</returns>
        public async System.Threading.Tasks.Task<PIItemsElement> GetReferencedElementsAsync (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
             ApiResponse<PIItemsElement> localVarResponse = await GetReferencedElementsAsyncWithHttpInfo(webId, nameFilter, descriptionFilter, categoryName, templateName, elementType, sortField, sortOrder, startIndex, maxCount, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve referenced elements based on the specified conditions.  By default, this method selects all referenced elements at the root level of the asset database. Users can search for the referenced elements based on specific search parameters. If no parameters are  specified in the search, the default values for each parameter will be used and will return the elements  that match the default search.
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the resource to use as the root of the search.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="nameFilter">The name query string used for finding objects. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="descriptionFilter">Specify that returned elements must have this description. The default is no description filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="categoryName">Specify that returned elements must have this category. The default is no category filter. (optional)</param>
        /// <param name="templateName">Specify that returned elements must have this template or a template derived from this template.  The default is no template filter. (optional)</param>
        /// <param name="elementType">Specify that returned elements must have this type. The default type is &#39;Any&#39;.  &lt;see topic&#x3D;\&quot;Element-Type\&quot; /&gt; (optional)</param>
        /// <param name="sortField">The field or property of the object used to sort the returned collection. The default is &#39;Name&#39;.  &lt;see topic&#x3D;\&quot;Sort Field\&quot; /&gt; (optional)</param>
        /// <param name="sortOrder">The order that the returned collection is sorted. The default is &#39;Ascending&#39;.  &lt;see topic&#x3D;\&quot;Sort Order\&quot; /&gt; (optional)</param>
        /// <param name="startIndex">The starting index (zero based) of the items to be returned. The default is 0. (optional)</param>
        /// <param name="maxCount">The maximum number of objects to be returned per call (page size). The default is 1000. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsElement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsElement>> GetReferencedElementsAsyncWithHttpInfo (string webId, string nameFilter = null, string descriptionFilter = null, string categoryName = null, string templateName = null, string elementType = null, string sortField = null, string sortOrder = null, int? startIndex = null, int? maxCount = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetReferencedElements");

            var localVarPath = "/assetdatabases/{webId}/referencedelements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (nameFilter != null) localVarQueryParams.Add("nameFilter", Configuration.ApiClient.ParameterToString(nameFilter)); // query parameter
            if (descriptionFilter != null) localVarQueryParams.Add("descriptionFilter", Configuration.ApiClient.ParameterToString(descriptionFilter)); // query parameter
            if (categoryName != null) localVarQueryParams.Add("categoryName", Configuration.ApiClient.ParameterToString(categoryName)); // query parameter
            if (templateName != null) localVarQueryParams.Add("templateName", Configuration.ApiClient.ParameterToString(templateName)); // query parameter
            if (elementType != null) localVarQueryParams.Add("elementType", Configuration.ApiClient.ParameterToString(elementType)); // query parameter
            if (sortField != null) localVarQueryParams.Add("sortField", Configuration.ApiClient.ParameterToString(sortField)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (startIndex != null) localVarQueryParams.Add("startIndex", Configuration.ApiClient.ParameterToString(startIndex)); // query parameter
            if (maxCount != null) localVarQueryParams.Add("maxCount", Configuration.ApiClient.ParameterToString(maxCount)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferencedElements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsElement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsElement) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsElement)));
            
        }

        /// <summary>
        /// Get the security information of the specified security item  associated with the asset database for a specified user. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database for the security to be checked.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security information to be returned.  Multiple security items may be specified with multiple instances of the parameter.  If the parameter is not specified, only &#39;Default&#39; security item of the security information  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt;</param>
        /// <param name="userIdentity">The user identity for the security information to be checked.  Multiple security identities may be specified with multiple instances of the parameter.  If the parameter is not specified, only the current user&#39;s security rights will be returned.  &lt;see topic&#x3D;\&quot;User Identity\&quot; /&gt;</param>
        /// <param name="forceRefresh">Indicates if the security cache should be refreshed before getting security information.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsSecurityRights</returns>
        public PIItemsSecurityRights GetSecurity (string webId, List<string> securityItem, List<string> userIdentity, bool? forceRefresh = null, string selectedFields = null)
        {
             ApiResponse<PIItemsSecurityRights> localVarResponse = GetSecurityWithHttpInfo(webId, securityItem, userIdentity, forceRefresh, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the security information of the specified security item  associated with the asset database for a specified user. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database for the security to be checked.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security information to be returned.  Multiple security items may be specified with multiple instances of the parameter.  If the parameter is not specified, only &#39;Default&#39; security item of the security information  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt;</param>
        /// <param name="userIdentity">The user identity for the security information to be checked.  Multiple security identities may be specified with multiple instances of the parameter.  If the parameter is not specified, only the current user&#39;s security rights will be returned.  &lt;see topic&#x3D;\&quot;User Identity\&quot; /&gt;</param>
        /// <param name="forceRefresh">Indicates if the security cache should be refreshed before getting security information.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsSecurityRights</returns>
        public ApiResponse< PIItemsSecurityRights > GetSecurityWithHttpInfo (string webId, List<string> securityItem, List<string> userIdentity, bool? forceRefresh = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetSecurity");
            // verify the required parameter 'securityItem' is set
            if (securityItem == null)
                throw new ApiException(400, "Missing required parameter 'securityItem' when calling AssetDataApiApi->GetSecurity");
            // verify the required parameter 'userIdentity' is set
            if (userIdentity == null)
                throw new ApiException(400, "Missing required parameter 'userIdentity' when calling AssetDataApiApi->GetSecurity");

            var localVarPath = "/assetdatabases/{webId}/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (userIdentity != null) localVarQueryParams.Add("userIdentity", Configuration.ApiClient.ParameterToString(userIdentity)); // query parameter
            if (forceRefresh != null) localVarQueryParams.Add("forceRefresh", Configuration.ApiClient.ParameterToString(forceRefresh)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsSecurityRights>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsSecurityRights) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsSecurityRights)));
            
        }

        /// <summary>
        /// Get the security information of the specified security item  associated with the asset database for a specified user. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database for the security to be checked.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security information to be returned.  Multiple security items may be specified with multiple instances of the parameter.  If the parameter is not specified, only &#39;Default&#39; security item of the security information  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt;</param>
        /// <param name="userIdentity">The user identity for the security information to be checked.  Multiple security identities may be specified with multiple instances of the parameter.  If the parameter is not specified, only the current user&#39;s security rights will be returned.  &lt;see topic&#x3D;\&quot;User Identity\&quot; /&gt;</param>
        /// <param name="forceRefresh">Indicates if the security cache should be refreshed before getting security information.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsSecurityRights</returns>
        public async System.Threading.Tasks.Task<PIItemsSecurityRights> GetSecurityAsync (string webId, List<string> securityItem, List<string> userIdentity, bool? forceRefresh = null, string selectedFields = null)
        {
             ApiResponse<PIItemsSecurityRights> localVarResponse = await GetSecurityAsyncWithHttpInfo(webId, securityItem, userIdentity, forceRefresh, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the security information of the specified security item  associated with the asset database for a specified user. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database for the security to be checked.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security information to be returned.  Multiple security items may be specified with multiple instances of the parameter.  If the parameter is not specified, only &#39;Default&#39; security item of the security information  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt;</param>
        /// <param name="userIdentity">The user identity for the security information to be checked.  Multiple security identities may be specified with multiple instances of the parameter.  If the parameter is not specified, only the current user&#39;s security rights will be returned.  &lt;see topic&#x3D;\&quot;User Identity\&quot; /&gt;</param>
        /// <param name="forceRefresh">Indicates if the security cache should be refreshed before getting security information.  The default is &#39;false&#39;. (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsSecurityRights)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsSecurityRights>> GetSecurityAsyncWithHttpInfo (string webId, List<string> securityItem, List<string> userIdentity, bool? forceRefresh = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetSecurity");
            // verify the required parameter 'securityItem' is set
            if (securityItem == null)
                throw new ApiException(400, "Missing required parameter 'securityItem' when calling AssetDataApiApi->GetSecurity");
            // verify the required parameter 'userIdentity' is set
            if (userIdentity == null)
                throw new ApiException(400, "Missing required parameter 'userIdentity' when calling AssetDataApiApi->GetSecurity");

            var localVarPath = "/assetdatabases/{webId}/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (userIdentity != null) localVarQueryParams.Add("userIdentity", Configuration.ApiClient.ParameterToString(userIdentity)); // query parameter
            if (forceRefresh != null) localVarQueryParams.Add("forceRefresh", Configuration.ApiClient.ParameterToString(forceRefresh)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsSecurityRights>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsSecurityRights) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsSecurityRights)));
            
        }

        /// <summary>
        /// Retrieve the security entries of the specified security item  associated with the asset database based on the specified criteria.  By default, all security entries for this asset database are returned. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for filtering security entries. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsSecurityEntry</returns>
        public PIItemsSecurityEntry GetSecurityEntries (string webId, string securityItem = null, string nameFilter = null, string selectedFields = null)
        {
             ApiResponse<PIItemsSecurityEntry> localVarResponse = GetSecurityEntriesWithHttpInfo(webId, securityItem, nameFilter, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the security entries of the specified security item  associated with the asset database based on the specified criteria.  By default, all security entries for this asset database are returned. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for filtering security entries. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsSecurityEntry</returns>
        public ApiResponse< PIItemsSecurityEntry > GetSecurityEntriesWithHttpInfo (string webId, string securityItem = null, string nameFilter = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetSecurityEntries");

            var localVarPath = "/assetdatabases/{webId}/securityentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (nameFilter != null) localVarQueryParams.Add("nameFilter", Configuration.ApiClient.ParameterToString(nameFilter)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsSecurityEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsSecurityEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsSecurityEntry)));
            
        }

        /// <summary>
        /// Retrieve the security entries of the specified security item  associated with the asset database based on the specified criteria.  By default, all security entries for this asset database are returned. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for filtering security entries. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsSecurityEntry</returns>
        public async System.Threading.Tasks.Task<PIItemsSecurityEntry> GetSecurityEntriesAsync (string webId, string securityItem = null, string nameFilter = null, string selectedFields = null)
        {
             ApiResponse<PIItemsSecurityEntry> localVarResponse = await GetSecurityEntriesAsyncWithHttpInfo(webId, securityItem, nameFilter, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the security entries of the specified security item  associated with the asset database based on the specified criteria.  By default, all security entries for this asset database are returned. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="nameFilter">The name query string used for filtering security entries. The default is no filter.  &lt;see topic&#x3D;\&quot;Query-String\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsSecurityEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsSecurityEntry>> GetSecurityEntriesAsyncWithHttpInfo (string webId, string securityItem = null, string nameFilter = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetSecurityEntries");

            var localVarPath = "/assetdatabases/{webId}/securityentries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (nameFilter != null) localVarQueryParams.Add("nameFilter", Configuration.ApiClient.ParameterToString(nameFilter)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsSecurityEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsSecurityEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsSecurityEntry)));
            
        }

        /// <summary>
        /// Retrieve the security entry of the specified security item  associated with the asset database with the specified name. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PISecurityEntry</returns>
        public PISecurityEntry GetSecurityEntryByName (string webId, string name, string securityItem = null, string selectedFields = null)
        {
             ApiResponse<PISecurityEntry> localVarResponse = GetSecurityEntryByNameWithHttpInfo(webId, name, securityItem, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the security entry of the specified security item  associated with the asset database with the specified name. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PISecurityEntry</returns>
        public ApiResponse< PISecurityEntry > GetSecurityEntryByNameWithHttpInfo (string webId, string name, string securityItem = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetSecurityEntryByName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AssetDataApiApi->GetSecurityEntryByName");

            var localVarPath = "/assetdatabases/{webId}/securityentries/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityEntryByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISecurityEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISecurityEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISecurityEntry)));
            
        }

        /// <summary>
        /// Retrieve the security entry of the specified security item  associated with the asset database with the specified name. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PISecurityEntry</returns>
        public async System.Threading.Tasks.Task<PISecurityEntry> GetSecurityEntryByNameAsync (string webId, string name, string securityItem = null, string selectedFields = null)
        {
             ApiResponse<PISecurityEntry> localVarResponse = await GetSecurityEntryByNameAsyncWithHttpInfo(webId, name, securityItem, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the security entry of the specified security item  associated with the asset database with the specified name. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry. For every blackslash character (\\) in the security entry name,  replace with asterisk (*). As an example, use domain*username instead of domain\\username.</param>
        /// <param name="securityItem">The security item of the desired security entries information to be returned.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be returned.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PISecurityEntry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PISecurityEntry>> GetSecurityEntryByNameAsyncWithHttpInfo (string webId, string name, string securityItem = null, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetSecurityEntryByName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AssetDataApiApi->GetSecurityEntryByName");

            var localVarPath = "/assetdatabases/{webId}/securityentries/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityEntryByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PISecurityEntry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PISecurityEntry) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PISecurityEntry)));
            
        }

        /// <summary>
        /// Retrieve table categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsCategory</returns>
        public PIItemsCategory GetTableCategories (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsCategory> localVarResponse = GetTableCategoriesWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve table categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsCategory</returns>
        public ApiResponse< PIItemsCategory > GetTableCategoriesWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetTableCategories");

            var localVarPath = "/assetdatabases/{webId}/tablecategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsCategory)));
            
        }

        /// <summary>
        /// Retrieve table categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsCategory</returns>
        public async System.Threading.Tasks.Task<PIItemsCategory> GetTableCategoriesAsync (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsCategory> localVarResponse = await GetTableCategoriesAsyncWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve table categories for a given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsCategory>> GetTableCategoriesAsyncWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetTableCategories");

            var localVarPath = "/assetdatabases/{webId}/tablecategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTableCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsCategory) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsCategory)));
            
        }

        /// <summary>
        /// Retrieve tables for given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>PIItemsTable</returns>
        public PIItemsTable GetTables (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsTable> localVarResponse = GetTablesWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve tables for given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of PIItemsTable</returns>
        public ApiResponse< PIItemsTable > GetTablesWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetTables");

            var localVarPath = "/assetdatabases/{webId}/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsTable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsTable)));
            
        }

        /// <summary>
        /// Retrieve tables for given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of PIItemsTable</returns>
        public async System.Threading.Tasks.Task<PIItemsTable> GetTablesAsync (string webId, string selectedFields = null)
        {
             ApiResponse<PIItemsTable> localVarResponse = await GetTablesAsyncWithHttpInfo(webId, selectedFields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve tables for given Asset Database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="selectedFields">List of fields to be returned in the response, separated by semicolons (;).   If this parameter is not specified, all available fields will be returned.  &lt;see topic&#x3D;\&quot;Selected Fields\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (PIItemsTable)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PIItemsTable>> GetTablesAsyncWithHttpInfo (string webId, string selectedFields = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->GetTables");

            var localVarPath = "/assetdatabases/{webId}/tables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (selectedFields != null) localVarQueryParams.Add("selectedFields", Configuration.ApiClient.ParameterToString(selectedFields)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PIItemsTable>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PIItemsTable) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PIItemsTable)));
            
        }

        /// <summary>
        /// Import an asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="importMode">Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;.  Multiple import modes may be specified by using multiple instances of importMode.  &lt;see topic&#x3D;\&quot;Import Mode\&quot; /&gt; (optional)</param>
        /// <returns>Object</returns>
        public Object Import (string webId, List<string> importMode = null)
        {
             ApiResponse<Object> localVarResponse = ImportWithHttpInfo(webId, importMode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import an asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="importMode">Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;.  Multiple import modes may be specified by using multiple instances of importMode.  &lt;see topic&#x3D;\&quot;Import Mode\&quot; /&gt; (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ImportWithHttpInfo (string webId, List<string> importMode = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Import");

            var localVarPath = "/assetdatabases/{webId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (importMode != null) localVarQueryParams.Add("importMode", Configuration.ApiClient.ParameterToString(importMode)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Import", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Import an asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="importMode">Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;.  Multiple import modes may be specified by using multiple instances of importMode.  &lt;see topic&#x3D;\&quot;Import Mode\&quot; /&gt; (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ImportAsync (string webId, List<string> importMode = null)
        {
             ApiResponse<Object> localVarResponse = await ImportAsyncWithHttpInfo(webId, importMode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import an asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="importMode">Indicates the type of import to perform. The default is &#39;AllowCreate | AllowUpdate | AutoCheckIn&#39;.  Multiple import modes may be specified by using multiple instances of importMode.  &lt;see topic&#x3D;\&quot;Import Mode\&quot; /&gt; (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportAsyncWithHttpInfo (string webId, List<string> importMode = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Import");

            var localVarPath = "/assetdatabases/{webId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (importMode != null) localVarQueryParams.Add("importMode", Configuration.ApiClient.ParameterToString(importMode)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Import", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Remove a reference to an existing element from the specified database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be removed from.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Object</returns>
        public Object RemoveReferencedElement (string webId, List<string> referencedElementWebId)
        {
             ApiResponse<Object> localVarResponse = RemoveReferencedElementWithHttpInfo(webId, referencedElementWebId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a reference to an existing element from the specified database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be removed from.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RemoveReferencedElementWithHttpInfo (string webId, List<string> referencedElementWebId)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->RemoveReferencedElement");
            // verify the required parameter 'referencedElementWebId' is set
            if (referencedElementWebId == null)
                throw new ApiException(400, "Missing required parameter 'referencedElementWebId' when calling AssetDataApiApi->RemoveReferencedElement");

            var localVarPath = "/assetdatabases/{webId}/referencedelements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (referencedElementWebId != null) localVarQueryParams.Add("referencedElementWebId", Configuration.ApiClient.ParameterToString(referencedElementWebId)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveReferencedElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Remove a reference to an existing element from the specified database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be removed from.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveReferencedElementAsync (string webId, List<string> referencedElementWebId)
        {
             ApiResponse<Object> localVarResponse = await RemoveReferencedElementAsyncWithHttpInfo(webId, referencedElementWebId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a reference to an existing element from the specified database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database which the referenced element will be removed from.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="referencedElementWebId">The ID of the referenced element.   Multiple referenced elements may be specified with multiple instances of the parameter.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveReferencedElementAsyncWithHttpInfo (string webId, List<string> referencedElementWebId)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->RemoveReferencedElement");
            // verify the required parameter 'referencedElementWebId' is set
            if (referencedElementWebId == null)
                throw new ApiException(400, "Missing required parameter 'referencedElementWebId' when calling AssetDataApiApi->RemoveReferencedElement");

            var localVarPath = "/assetdatabases/{webId}/referencedelements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (referencedElementWebId != null) localVarQueryParams.Add("referencedElementWebId", Configuration.ApiClient.ParameterToString(referencedElementWebId)); // query parameter

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveReferencedElement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update an asset database by replacing items in its definition. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="database">A partial database containing the desired changes.</param>
        /// <returns>Object</returns>
        public Object Update (string webId, PIAssetDatabase database)
        {
             ApiResponse<Object> localVarResponse = UpdateWithHttpInfo(webId, database);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an asset database by replacing items in its definition. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="database">A partial database containing the desired changes.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateWithHttpInfo (string webId, PIAssetDatabase database)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Update");
            // verify the required parameter 'database' is set
            if (database == null)
                throw new ApiException(400, "Missing required parameter 'database' when calling AssetDataApiApi->Update");

            var localVarPath = "/assetdatabases/{webId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (database != null && database.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(database); // http body (model) parameter
            }
            else
            {
                localVarPostBody = database; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update an asset database by replacing items in its definition. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="database">A partial database containing the desired changes.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateAsync (string webId, PIAssetDatabase database)
        {
             ApiResponse<Object> localVarResponse = await UpdateAsyncWithHttpInfo(webId, database);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an asset database by replacing items in its definition. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the database. &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="database">A partial database containing the desired changes.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string webId, PIAssetDatabase database)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->Update");
            // verify the required parameter 'database' is set
            if (database == null)
                throw new ApiException(400, "Missing required parameter 'database' when calling AssetDataApiApi->Update");

            var localVarPath = "/assetdatabases/{webId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (database != null && database.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(database); // http body (model) parameter
            }
            else
            {
                localVarPostBody = database; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be updated.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry.</param>
        /// <param name="securityEntry">The new security entry definition.   The full list of allow and deny rights must be supplied or they will be removed.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be updated.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be updated.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateSecurityEntry (string webId, string name, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null)
        {
             ApiResponse<Object> localVarResponse = UpdateSecurityEntryWithHttpInfo(webId, name, securityEntry, securityItem, applyToChildren);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be updated.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry.</param>
        /// <param name="securityEntry">The new security entry definition.   The full list of allow and deny rights must be supplied or they will be removed.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be updated.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be updated.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateSecurityEntryWithHttpInfo (string webId, string name, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->UpdateSecurityEntry");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AssetDataApiApi->UpdateSecurityEntry");
            // verify the required parameter 'securityEntry' is set
            if (securityEntry == null)
                throw new ApiException(400, "Missing required parameter 'securityEntry' when calling AssetDataApiApi->UpdateSecurityEntry");

            var localVarPath = "/assetdatabases/{webId}/securityentries/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (applyToChildren != null) localVarQueryParams.Add("applyToChildren", Configuration.ApiClient.ParameterToString(applyToChildren)); // query parameter
            if (securityEntry != null && securityEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(securityEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityEntry; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecurityEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Update a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be updated.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry.</param>
        /// <param name="securityEntry">The new security entry definition.   The full list of allow and deny rights must be supplied or they will be removed.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be updated.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be updated.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateSecurityEntryAsync (string webId, string name, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateSecurityEntryAsyncWithHttpInfo(webId, name, securityEntry, securityItem, applyToChildren);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a security entry owned by the asset database. 
        /// </summary>
        /// <exception cref="OSIsoft.PIDevClub.PIWebApiClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webId">The ID of the asset database where the security entry will be updated.  &lt;see topic&#x3D;\&quot;WebID\&quot; /&gt;</param>
        /// <param name="name">The name of the security entry.</param>
        /// <param name="securityEntry">The new security entry definition.   The full list of allow and deny rights must be supplied or they will be removed.  &lt;see topic&#x3D;\&quot;Security Rights\&quot; /&gt;</param>
        /// <param name="securityItem">The security item of the desired security entries to be updated.  If the parameter is not specified, security entries of the &#39;Default&#39; security item  will be updated.  &lt;see topic&#x3D;\&quot;Security Item\&quot; /&gt; (optional)</param>
        /// <param name="applyToChildren">If false, the new access permissions are only applied to the associated object.   If true, the access permissions of children with any parent-child reference types will   change when the permissions on the primary parent change. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSecurityEntryAsyncWithHttpInfo (string webId, string name, PISecurityEntry securityEntry, string securityItem = null, bool? applyToChildren = null)
        {
            // verify the required parameter 'webId' is set
            if (webId == null)
                throw new ApiException(400, "Missing required parameter 'webId' when calling AssetDataApiApi->UpdateSecurityEntry");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AssetDataApiApi->UpdateSecurityEntry");
            // verify the required parameter 'securityEntry' is set
            if (securityEntry == null)
                throw new ApiException(400, "Missing required parameter 'securityEntry' when calling AssetDataApiApi->UpdateSecurityEntry");

            var localVarPath = "/assetdatabases/{webId}/securityentries/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new CustomDictionaryForQueryString();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (webId != null) localVarPathParams.Add("webId", Configuration.ApiClient.ParameterToString(webId)); // path parameter
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (securityItem != null) localVarQueryParams.Add("securityItem", Configuration.ApiClient.ParameterToString(securityItem)); // query parameter
            if (applyToChildren != null) localVarQueryParams.Add("applyToChildren", Configuration.ApiClient.ParameterToString(applyToChildren)); // query parameter
            if (securityEntry != null && securityEntry.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(securityEntry); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityEntry; // byte array
            }

            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecurityEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

    }
}
