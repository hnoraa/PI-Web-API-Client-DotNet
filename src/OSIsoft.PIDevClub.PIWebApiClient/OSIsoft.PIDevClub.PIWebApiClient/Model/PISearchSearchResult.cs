/* 
 * PI Web API 2016 R2 Swagger definition
 *
 * RESTful client for PI Web API 2016 R2
 *
 * OpenAPI spec version: v1
 * Contact: pidevclub@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace OSIsoft.PIDevClub.PIWebApiClient.Model
{
    /// <summary>
    /// SearchResult Class
    /// </summary>
    [DataContract]
    public partial class PISearchSearchResult :  IEquatable<PISearchSearchResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PISearchSearchResult" /> class.
        /// </summary>
        /// <param name="Name">Gets or sets the name of the result item..</param>
        /// <param name="Parents">Gets or sets parents of this element.</param>
        /// <param name="Description">Gets or sets the description (or PI descriptor) of this object.</param>
        /// <param name="Paths">Gets or sets the path of this search result. For example: pi:PIServer or af:AFServer\\AFDatabase\\AFElement1.</param>
        /// <param name="PrimaryPath">Gets or sets the primary path of this search result. For example: af:AFServer\\AFDatabase\\AFElement1..</param>
        /// <param name="HasChildren">Gets or sets the value indicating whether this item can expand or not..</param>
        /// <param name="Children">Gets or sets the children of this object.</param>
        /// <param name="Attributes">Gets or sets the Attribute of the item in a key value notation. Attribute name being the key and Attribute value being the Value..</param>
        /// <param name="DisplayAttributes">Gets or sets the Display attributes of the item in a key value notation..</param>
        /// <param name="MatchedFields">Gets or sets the matched fields keys.</param>
        /// <param name="ItemType">Gets or sets the type of the result item..</param>
        /// <param name="AFCategories">Gets or sets the collection of categories.</param>
        /// <param name="UniqueID">Gets or sets the ID unique to every result item..</param>
        /// <param name="Owner">Gets or sets the Owner of every display.</param>
        /// <param name="Access">Gets or sets the Access of every display.</param>
        /// <param name="_ReadOnly">Gets or sets the ReadOnly attribute for every display.</param>
        /// <param name="DisplayLabels">Gets or sets the Labels for every display.</param>
        /// <param name="FolderLocation">Gets or sets the Folder Location of every PB display.</param>
        /// <param name="WebID">Gets or sets the WebID unique to every result item..</param>
        /// <param name="UoM">Gets or sets the units of measure for this search result.</param>
        /// <param name="DataType">Gets or sets the data type for this search result.</param>
        /// <param name="Template">Gets or sets Template for this item.</param>
        /// <param name="ReferencedElements">Gets or sets the ID unique to every result item..</param>
        /// <param name="StartTime">Gets or sets the start time of this result.</param>
        /// <param name="EndTime">Gets or sets the end time of this result.</param>
        /// <param name="Plottable">Number of plottable attributes (or MaxInt).</param>
        /// <param name="ChildrenLink">Gets or sets a link query for direct children of this object.</param>
        /// <param name="Links">Links.</param>
        /// <param name="Score">Gets or sets the query score for this search result.</param>
        public PISearchSearchResult(string Name = null, List<PISearchSearchResultParent> Parents = null, string Description = null, List<string> Paths = null, string PrimaryPath = null, bool? HasChildren = null, List<PISearchSearchResult> Children = null, List<PISearchSearchResultAttribute> Attributes = null, List<PISearchSearchResultDisplayAttribute> DisplayAttributes = null, List<PISearchSearchResultMatches> MatchedFields = null, string ItemType = null, List<string> AFCategories = null, string UniqueID = null, string Owner = null, string Access = null, string _ReadOnly = null, string DisplayLabels = null, string FolderLocation = null, string WebID = null, string UoM = null, string DataType = null, PISearchSearchResultAFObject Template = null, List<PISearchSearchResultAFObject> ReferencedElements = null, DateTime? StartTime = null, DateTime? EndTime = null, int? Plottable = null, string ChildrenLink = null, Dictionary<string, string> Links = null, float? Score = null)
        {
            this.Name = Name;
            this.Parents = Parents;
            this.Description = Description;
            this.Paths = Paths;
            this.PrimaryPath = PrimaryPath;
            this.HasChildren = HasChildren;
            this.Children = Children;
            this.Attributes = Attributes;
            this.DisplayAttributes = DisplayAttributes;
            this.MatchedFields = MatchedFields;
            this.ItemType = ItemType;
            this.AFCategories = AFCategories;
            this.UniqueID = UniqueID;
            this.Owner = Owner;
            this.Access = Access;
            this._ReadOnly = _ReadOnly;
            this.DisplayLabels = DisplayLabels;
            this.FolderLocation = FolderLocation;
            this.WebID = WebID;
            this.UoM = UoM;
            this.DataType = DataType;
            this.Template = Template;
            this.ReferencedElements = ReferencedElements;
            this.StartTime = StartTime;
            this.EndTime = EndTime;
            this.Plottable = Plottable;
            this.ChildrenLink = ChildrenLink;
            this.Links = Links;
            this.Score = Score;
        }
        
        /// <summary>
        /// Gets or sets the name of the result item.
        /// </summary>
        /// <value>Gets or sets the name of the result item.</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or sets parents of this element
        /// </summary>
        /// <value>Gets or sets parents of this element</value>
        [DataMember(Name="Parents", EmitDefaultValue=false)]
        public List<PISearchSearchResultParent> Parents { get; set; }
        /// <summary>
        /// Gets or sets the description (or PI descriptor) of this object
        /// </summary>
        /// <value>Gets or sets the description (or PI descriptor) of this object</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or sets the path of this search result. For example: pi:PIServer or af:AFServer\\AFDatabase\\AFElement1
        /// </summary>
        /// <value>Gets or sets the path of this search result. For example: pi:PIServer or af:AFServer\\AFDatabase\\AFElement1</value>
        [DataMember(Name="Paths", EmitDefaultValue=false)]
        public List<string> Paths { get; set; }
        /// <summary>
        /// Gets or sets the primary path of this search result. For example: af:AFServer\\AFDatabase\\AFElement1.
        /// </summary>
        /// <value>Gets or sets the primary path of this search result. For example: af:AFServer\\AFDatabase\\AFElement1.</value>
        [DataMember(Name="PrimaryPath", EmitDefaultValue=false)]
        public string PrimaryPath { get; set; }
        /// <summary>
        /// Gets or sets the value indicating whether this item can expand or not.
        /// </summary>
        /// <value>Gets or sets the value indicating whether this item can expand or not.</value>
        [DataMember(Name="HasChildren", EmitDefaultValue=false)]
        public bool? HasChildren { get; set; }
        /// <summary>
        /// Gets or sets the children of this object
        /// </summary>
        /// <value>Gets or sets the children of this object</value>
        [DataMember(Name="Children", EmitDefaultValue=false)]
        public List<PISearchSearchResult> Children { get; set; }
        /// <summary>
        /// Gets or sets the Attribute of the item in a key value notation. Attribute name being the key and Attribute value being the Value.
        /// </summary>
        /// <value>Gets or sets the Attribute of the item in a key value notation. Attribute name being the key and Attribute value being the Value.</value>
        [DataMember(Name="Attributes", EmitDefaultValue=false)]
        public List<PISearchSearchResultAttribute> Attributes { get; set; }
        /// <summary>
        /// Gets or sets the Display attributes of the item in a key value notation.
        /// </summary>
        /// <value>Gets or sets the Display attributes of the item in a key value notation.</value>
        [DataMember(Name="DisplayAttributes", EmitDefaultValue=false)]
        public List<PISearchSearchResultDisplayAttribute> DisplayAttributes { get; set; }
        /// <summary>
        /// Gets or sets the matched fields keys
        /// </summary>
        /// <value>Gets or sets the matched fields keys</value>
        [DataMember(Name="MatchedFields", EmitDefaultValue=false)]
        public List<PISearchSearchResultMatches> MatchedFields { get; set; }
        /// <summary>
        /// Gets or sets the type of the result item.
        /// </summary>
        /// <value>Gets or sets the type of the result item.</value>
        [DataMember(Name="ItemType", EmitDefaultValue=false)]
        public string ItemType { get; set; }
        /// <summary>
        /// Gets or sets the collection of categories
        /// </summary>
        /// <value>Gets or sets the collection of categories</value>
        [DataMember(Name="AFCategories", EmitDefaultValue=false)]
        public List<string> AFCategories { get; set; }
        /// <summary>
        /// Gets or sets the ID unique to every result item.
        /// </summary>
        /// <value>Gets or sets the ID unique to every result item.</value>
        [DataMember(Name="UniqueID", EmitDefaultValue=false)]
        public string UniqueID { get; set; }
        /// <summary>
        /// Gets or sets the Owner of every display
        /// </summary>
        /// <value>Gets or sets the Owner of every display</value>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public string Owner { get; set; }
        /// <summary>
        /// Gets or sets the Access of every display
        /// </summary>
        /// <value>Gets or sets the Access of every display</value>
        [DataMember(Name="Access", EmitDefaultValue=false)]
        public string Access { get; set; }
        /// <summary>
        /// Gets or sets the ReadOnly attribute for every display
        /// </summary>
        /// <value>Gets or sets the ReadOnly attribute for every display</value>
        [DataMember(Name="ReadOnly", EmitDefaultValue=false)]
        public string _ReadOnly { get; set; }
        /// <summary>
        /// Gets or sets the Labels for every display
        /// </summary>
        /// <value>Gets or sets the Labels for every display</value>
        [DataMember(Name="DisplayLabels", EmitDefaultValue=false)]
        public string DisplayLabels { get; set; }
        /// <summary>
        /// Gets or sets the Folder Location of every PB display
        /// </summary>
        /// <value>Gets or sets the Folder Location of every PB display</value>
        [DataMember(Name="FolderLocation", EmitDefaultValue=false)]
        public string FolderLocation { get; set; }
        /// <summary>
        /// Gets or sets the WebID unique to every result item.
        /// </summary>
        /// <value>Gets or sets the WebID unique to every result item.</value>
        [DataMember(Name="WebID", EmitDefaultValue=false)]
        public string WebID { get; set; }
        /// <summary>
        /// Gets or sets the units of measure for this search result
        /// </summary>
        /// <value>Gets or sets the units of measure for this search result</value>
        [DataMember(Name="UoM", EmitDefaultValue=false)]
        public string UoM { get; set; }
        /// <summary>
        /// Gets or sets the data type for this search result
        /// </summary>
        /// <value>Gets or sets the data type for this search result</value>
        [DataMember(Name="DataType", EmitDefaultValue=false)]
        public string DataType { get; set; }
        /// <summary>
        /// Gets or sets Template for this item
        /// </summary>
        /// <value>Gets or sets Template for this item</value>
        [DataMember(Name="Template", EmitDefaultValue=false)]
        public PISearchSearchResultAFObject Template { get; set; }
        /// <summary>
        /// Gets or sets the ID unique to every result item.
        /// </summary>
        /// <value>Gets or sets the ID unique to every result item.</value>
        [DataMember(Name="ReferencedElements", EmitDefaultValue=false)]
        public List<PISearchSearchResultAFObject> ReferencedElements { get; set; }
        /// <summary>
        /// Gets or sets the start time of this result
        /// </summary>
        /// <value>Gets or sets the start time of this result</value>
        [DataMember(Name="StartTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }
        /// <summary>
        /// Gets or sets the end time of this result
        /// </summary>
        /// <value>Gets or sets the end time of this result</value>
        [DataMember(Name="EndTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }
        /// <summary>
        /// Number of plottable attributes (or MaxInt)
        /// </summary>
        /// <value>Number of plottable attributes (or MaxInt)</value>
        [DataMember(Name="Plottable", EmitDefaultValue=false)]
        public int? Plottable { get; set; }
        /// <summary>
        /// Gets or sets a link query for direct children of this object
        /// </summary>
        /// <value>Gets or sets a link query for direct children of this object</value>
        [DataMember(Name="ChildrenLink", EmitDefaultValue=false)]
        public string ChildrenLink { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="Links", EmitDefaultValue=false)]
        public Dictionary<string, string> Links { get; set; }
        /// <summary>
        /// Gets or sets the query score for this search result
        /// </summary>
        /// <value>Gets or sets the query score for this search result</value>
        [DataMember(Name="Score", EmitDefaultValue=false)]
        public float? Score { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PISearchSearchResult {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parents: ").Append(Parents).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Paths: ").Append(Paths).Append("\n");
            sb.Append("  PrimaryPath: ").Append(PrimaryPath).Append("\n");
            sb.Append("  HasChildren: ").Append(HasChildren).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  DisplayAttributes: ").Append(DisplayAttributes).Append("\n");
            sb.Append("  MatchedFields: ").Append(MatchedFields).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  AFCategories: ").Append(AFCategories).Append("\n");
            sb.Append("  UniqueID: ").Append(UniqueID).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  DisplayLabels: ").Append(DisplayLabels).Append("\n");
            sb.Append("  FolderLocation: ").Append(FolderLocation).Append("\n");
            sb.Append("  WebID: ").Append(WebID).Append("\n");
            sb.Append("  UoM: ").Append(UoM).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  ReferencedElements: ").Append(ReferencedElements).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Plottable: ").Append(Plottable).Append("\n");
            sb.Append("  ChildrenLink: ").Append(ChildrenLink).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PISearchSearchResult);
        }

        /// <summary>
        /// Returns true if PISearchSearchResult instances are equal
        /// </summary>
        /// <param name="other">Instance of PISearchSearchResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PISearchSearchResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Parents == other.Parents ||
                    this.Parents != null &&
                    this.Parents.SequenceEqual(other.Parents)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Paths == other.Paths ||
                    this.Paths != null &&
                    this.Paths.SequenceEqual(other.Paths)
                ) && 
                (
                    this.PrimaryPath == other.PrimaryPath ||
                    this.PrimaryPath != null &&
                    this.PrimaryPath.Equals(other.PrimaryPath)
                ) && 
                (
                    this.HasChildren == other.HasChildren ||
                    this.HasChildren != null &&
                    this.HasChildren.Equals(other.HasChildren)
                ) && 
                (
                    this.Children == other.Children ||
                    this.Children != null &&
                    this.Children.SequenceEqual(other.Children)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(other.Attributes)
                ) && 
                (
                    this.DisplayAttributes == other.DisplayAttributes ||
                    this.DisplayAttributes != null &&
                    this.DisplayAttributes.SequenceEqual(other.DisplayAttributes)
                ) && 
                (
                    this.MatchedFields == other.MatchedFields ||
                    this.MatchedFields != null &&
                    this.MatchedFields.SequenceEqual(other.MatchedFields)
                ) && 
                (
                    this.ItemType == other.ItemType ||
                    this.ItemType != null &&
                    this.ItemType.Equals(other.ItemType)
                ) && 
                (
                    this.AFCategories == other.AFCategories ||
                    this.AFCategories != null &&
                    this.AFCategories.SequenceEqual(other.AFCategories)
                ) && 
                (
                    this.UniqueID == other.UniqueID ||
                    this.UniqueID != null &&
                    this.UniqueID.Equals(other.UniqueID)
                ) && 
                (
                    this.Owner == other.Owner ||
                    this.Owner != null &&
                    this.Owner.Equals(other.Owner)
                ) && 
                (
                    this.Access == other.Access ||
                    this.Access != null &&
                    this.Access.Equals(other.Access)
                ) && 
                (
                    this._ReadOnly == other._ReadOnly ||
                    this._ReadOnly != null &&
                    this._ReadOnly.Equals(other._ReadOnly)
                ) && 
                (
                    this.DisplayLabels == other.DisplayLabels ||
                    this.DisplayLabels != null &&
                    this.DisplayLabels.Equals(other.DisplayLabels)
                ) && 
                (
                    this.FolderLocation == other.FolderLocation ||
                    this.FolderLocation != null &&
                    this.FolderLocation.Equals(other.FolderLocation)
                ) && 
                (
                    this.WebID == other.WebID ||
                    this.WebID != null &&
                    this.WebID.Equals(other.WebID)
                ) && 
                (
                    this.UoM == other.UoM ||
                    this.UoM != null &&
                    this.UoM.Equals(other.UoM)
                ) && 
                (
                    this.DataType == other.DataType ||
                    this.DataType != null &&
                    this.DataType.Equals(other.DataType)
                ) && 
                (
                    this.Template == other.Template ||
                    this.Template != null &&
                    this.Template.Equals(other.Template)
                ) && 
                (
                    this.ReferencedElements == other.ReferencedElements ||
                    this.ReferencedElements != null &&
                    this.ReferencedElements.SequenceEqual(other.ReferencedElements)
                ) && 
                (
                    this.StartTime == other.StartTime ||
                    this.StartTime != null &&
                    this.StartTime.Equals(other.StartTime)
                ) && 
                (
                    this.EndTime == other.EndTime ||
                    this.EndTime != null &&
                    this.EndTime.Equals(other.EndTime)
                ) && 
                (
                    this.Plottable == other.Plottable ||
                    this.Plottable != null &&
                    this.Plottable.Equals(other.Plottable)
                ) && 
                (
                    this.ChildrenLink == other.ChildrenLink ||
                    this.ChildrenLink != null &&
                    this.ChildrenLink.Equals(other.ChildrenLink)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(other.Links)
                ) && 
                (
                    this.Score == other.Score ||
                    this.Score != null &&
                    this.Score.Equals(other.Score)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Parents != null)
                    hash = hash * 59 + this.Parents.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Paths != null)
                    hash = hash * 59 + this.Paths.GetHashCode();
                if (this.PrimaryPath != null)
                    hash = hash * 59 + this.PrimaryPath.GetHashCode();
                if (this.HasChildren != null)
                    hash = hash * 59 + this.HasChildren.GetHashCode();
                if (this.Children != null)
                    hash = hash * 59 + this.Children.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                if (this.DisplayAttributes != null)
                    hash = hash * 59 + this.DisplayAttributes.GetHashCode();
                if (this.MatchedFields != null)
                    hash = hash * 59 + this.MatchedFields.GetHashCode();
                if (this.ItemType != null)
                    hash = hash * 59 + this.ItemType.GetHashCode();
                if (this.AFCategories != null)
                    hash = hash * 59 + this.AFCategories.GetHashCode();
                if (this.UniqueID != null)
                    hash = hash * 59 + this.UniqueID.GetHashCode();
                if (this.Owner != null)
                    hash = hash * 59 + this.Owner.GetHashCode();
                if (this.Access != null)
                    hash = hash * 59 + this.Access.GetHashCode();
                if (this._ReadOnly != null)
                    hash = hash * 59 + this._ReadOnly.GetHashCode();
                if (this.DisplayLabels != null)
                    hash = hash * 59 + this.DisplayLabels.GetHashCode();
                if (this.FolderLocation != null)
                    hash = hash * 59 + this.FolderLocation.GetHashCode();
                if (this.WebID != null)
                    hash = hash * 59 + this.WebID.GetHashCode();
                if (this.UoM != null)
                    hash = hash * 59 + this.UoM.GetHashCode();
                if (this.DataType != null)
                    hash = hash * 59 + this.DataType.GetHashCode();
                if (this.Template != null)
                    hash = hash * 59 + this.Template.GetHashCode();
                if (this.ReferencedElements != null)
                    hash = hash * 59 + this.ReferencedElements.GetHashCode();
                if (this.StartTime != null)
                    hash = hash * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hash = hash * 59 + this.EndTime.GetHashCode();
                if (this.Plottable != null)
                    hash = hash * 59 + this.Plottable.GetHashCode();
                if (this.ChildrenLink != null)
                    hash = hash * 59 + this.ChildrenLink.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Score != null)
                    hash = hash * 59 + this.Score.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
