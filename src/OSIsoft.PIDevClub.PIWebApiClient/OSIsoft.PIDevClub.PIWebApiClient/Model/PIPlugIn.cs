/* 
 * PI Web API 2016 R2 Swagger definition
 *
 * RESTful client for PI Web API 2016 R2
 *
 * OpenAPI spec version: v1
 * Contact: pidevclub@osisoft.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace OSIsoft.PIDevClub.PIWebApiClient.Model
{
    /// <summary>
    /// PIPlugIn
    /// </summary>
    [DataContract]
    public partial class PIPlugIn :  IEquatable<PIPlugIn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PIPlugIn" /> class.
        /// </summary>
        /// <param name="WebId">WebId.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Path">Path.</param>
        /// <param name="AssemblyFileName">AssemblyFileName.</param>
        /// <param name="AssemblyID">AssemblyID.</param>
        /// <param name="AssemblyLoadProperties">AssemblyLoadProperties.</param>
        /// <param name="AssemblyTime">AssemblyTime.</param>
        /// <param name="CompatibilityVersion">CompatibilityVersion.</param>
        /// <param name="IsBrowsable">IsBrowsable.</param>
        /// <param name="IsNonEditableConfig">IsNonEditableConfig.</param>
        /// <param name="LoadedAssemblyTime">LoadedAssemblyTime.</param>
        /// <param name="LoadedVersion">LoadedVersion.</param>
        /// <param name="Version">Version.</param>
        /// <param name="Links">Links.</param>
        public PIPlugIn(string WebId = null, Guid? Id = null, string Name = null, string Description = null, string Path = null, string AssemblyFileName = null, Guid? AssemblyID = null, List<string> AssemblyLoadProperties = null, DateTime? AssemblyTime = null, int? CompatibilityVersion = null, bool? IsBrowsable = null, bool? IsNonEditableConfig = null, DateTime? LoadedAssemblyTime = null, string LoadedVersion = null, string Version = null, Dictionary<string, string> Links = null)
        {
            this.WebId = WebId;
            this.Id = Id;
            this.Name = Name;
            this.Description = Description;
            this.Path = Path;
            this.AssemblyFileName = AssemblyFileName;
            this.AssemblyID = AssemblyID;
            this.AssemblyLoadProperties = AssemblyLoadProperties;
            this.AssemblyTime = AssemblyTime;
            this.CompatibilityVersion = CompatibilityVersion;
            this.IsBrowsable = IsBrowsable;
            this.IsNonEditableConfig = IsNonEditableConfig;
            this.LoadedAssemblyTime = LoadedAssemblyTime;
            this.LoadedVersion = LoadedVersion;
            this.Version = Version;
            this.Links = Links;
        }
        
        /// <summary>
        /// Gets or Sets WebId
        /// </summary>
        [DataMember(Name="WebId", EmitDefaultValue=false)]
        public string WebId { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="Path", EmitDefaultValue=false)]
        public string Path { get; set; }
        /// <summary>
        /// Gets or Sets AssemblyFileName
        /// </summary>
        [DataMember(Name="AssemblyFileName", EmitDefaultValue=false)]
        public string AssemblyFileName { get; set; }
        /// <summary>
        /// Gets or Sets AssemblyID
        /// </summary>
        [DataMember(Name="AssemblyID", EmitDefaultValue=false)]
        public Guid? AssemblyID { get; set; }
        /// <summary>
        /// Gets or Sets AssemblyLoadProperties
        /// </summary>
        [DataMember(Name="AssemblyLoadProperties", EmitDefaultValue=false)]
        public List<string> AssemblyLoadProperties { get; set; }
        /// <summary>
        /// Gets or Sets AssemblyTime
        /// </summary>
        [DataMember(Name="AssemblyTime", EmitDefaultValue=false)]
        public DateTime? AssemblyTime { get; set; }
        /// <summary>
        /// Gets or Sets CompatibilityVersion
        /// </summary>
        [DataMember(Name="CompatibilityVersion", EmitDefaultValue=false)]
        public int? CompatibilityVersion { get; set; }
        /// <summary>
        /// Gets or Sets IsBrowsable
        /// </summary>
        [DataMember(Name="IsBrowsable", EmitDefaultValue=false)]
        public bool? IsBrowsable { get; set; }
        /// <summary>
        /// Gets or Sets IsNonEditableConfig
        /// </summary>
        [DataMember(Name="IsNonEditableConfig", EmitDefaultValue=false)]
        public bool? IsNonEditableConfig { get; set; }
        /// <summary>
        /// Gets or Sets LoadedAssemblyTime
        /// </summary>
        [DataMember(Name="LoadedAssemblyTime", EmitDefaultValue=false)]
        public DateTime? LoadedAssemblyTime { get; set; }
        /// <summary>
        /// Gets or Sets LoadedVersion
        /// </summary>
        [DataMember(Name="LoadedVersion", EmitDefaultValue=false)]
        public string LoadedVersion { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="Links", EmitDefaultValue=false)]
        public Dictionary<string, string> Links { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PIPlugIn {\n");
            sb.Append("  WebId: ").Append(WebId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  AssemblyFileName: ").Append(AssemblyFileName).Append("\n");
            sb.Append("  AssemblyID: ").Append(AssemblyID).Append("\n");
            sb.Append("  AssemblyLoadProperties: ").Append(AssemblyLoadProperties).Append("\n");
            sb.Append("  AssemblyTime: ").Append(AssemblyTime).Append("\n");
            sb.Append("  CompatibilityVersion: ").Append(CompatibilityVersion).Append("\n");
            sb.Append("  IsBrowsable: ").Append(IsBrowsable).Append("\n");
            sb.Append("  IsNonEditableConfig: ").Append(IsNonEditableConfig).Append("\n");
            sb.Append("  LoadedAssemblyTime: ").Append(LoadedAssemblyTime).Append("\n");
            sb.Append("  LoadedVersion: ").Append(LoadedVersion).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as PIPlugIn);
        }

        /// <summary>
        /// Returns true if PIPlugIn instances are equal
        /// </summary>
        /// <param name="other">Instance of PIPlugIn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PIPlugIn other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.WebId == other.WebId ||
                    this.WebId != null &&
                    this.WebId.Equals(other.WebId)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                ) && 
                (
                    this.AssemblyFileName == other.AssemblyFileName ||
                    this.AssemblyFileName != null &&
                    this.AssemblyFileName.Equals(other.AssemblyFileName)
                ) && 
                (
                    this.AssemblyID == other.AssemblyID ||
                    this.AssemblyID != null &&
                    this.AssemblyID.Equals(other.AssemblyID)
                ) && 
                (
                    this.AssemblyLoadProperties == other.AssemblyLoadProperties ||
                    this.AssemblyLoadProperties != null &&
                    this.AssemblyLoadProperties.SequenceEqual(other.AssemblyLoadProperties)
                ) && 
                (
                    this.AssemblyTime == other.AssemblyTime ||
                    this.AssemblyTime != null &&
                    this.AssemblyTime.Equals(other.AssemblyTime)
                ) && 
                (
                    this.CompatibilityVersion == other.CompatibilityVersion ||
                    this.CompatibilityVersion != null &&
                    this.CompatibilityVersion.Equals(other.CompatibilityVersion)
                ) && 
                (
                    this.IsBrowsable == other.IsBrowsable ||
                    this.IsBrowsable != null &&
                    this.IsBrowsable.Equals(other.IsBrowsable)
                ) && 
                (
                    this.IsNonEditableConfig == other.IsNonEditableConfig ||
                    this.IsNonEditableConfig != null &&
                    this.IsNonEditableConfig.Equals(other.IsNonEditableConfig)
                ) && 
                (
                    this.LoadedAssemblyTime == other.LoadedAssemblyTime ||
                    this.LoadedAssemblyTime != null &&
                    this.LoadedAssemblyTime.Equals(other.LoadedAssemblyTime)
                ) && 
                (
                    this.LoadedVersion == other.LoadedVersion ||
                    this.LoadedVersion != null &&
                    this.LoadedVersion.Equals(other.LoadedVersion)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.WebId != null)
                    hash = hash * 59 + this.WebId.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                if (this.AssemblyFileName != null)
                    hash = hash * 59 + this.AssemblyFileName.GetHashCode();
                if (this.AssemblyID != null)
                    hash = hash * 59 + this.AssemblyID.GetHashCode();
                if (this.AssemblyLoadProperties != null)
                    hash = hash * 59 + this.AssemblyLoadProperties.GetHashCode();
                if (this.AssemblyTime != null)
                    hash = hash * 59 + this.AssemblyTime.GetHashCode();
                if (this.CompatibilityVersion != null)
                    hash = hash * 59 + this.CompatibilityVersion.GetHashCode();
                if (this.IsBrowsable != null)
                    hash = hash * 59 + this.IsBrowsable.GetHashCode();
                if (this.IsNonEditableConfig != null)
                    hash = hash * 59 + this.IsNonEditableConfig.GetHashCode();
                if (this.LoadedAssemblyTime != null)
                    hash = hash * 59 + this.LoadedAssemblyTime.GetHashCode();
                if (this.LoadedVersion != null)
                    hash = hash * 59 + this.LoadedVersion.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
