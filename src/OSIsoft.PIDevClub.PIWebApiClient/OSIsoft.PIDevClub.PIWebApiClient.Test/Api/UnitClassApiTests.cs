// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.UnitsOfMeasure;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing UnitClassApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UnitClassApiTests : CommonApi
    {
        private IUnitClassApi instance;
        private string webId;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.UnitClass;
            base.CreateSampleDatabaseForTests();
            string path = Constants.AF_UOM_CLASS_PATH;
            webId = instance.GetByPath(path).WebId;

        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of UnitClassApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(UnitClassApi), instance, "instance is a UnitClassApi");
        }


        /// <summary>
        /// Test CreateUnit
        /// </summary>
        [Test]
        public void CreateUnitTest()
        {            
            PIUnit unitDTO = new PIUnit(null, null, Constants.AF_UOM_CLASS_UNIT + "4", Constants.AF_UOM_CLASS_ABBR + "4", "Test4 for Swagger", null, null, null, 1, 0, Constants.AF_UOM_CLASS_ABBR);
            instance.CreateUnit(webId, unitDTO);
            StandardPISystem.UOMDatabase.Refresh();
            string path = Constants.AF_UOM_CLASS_PATH;
            UOMClass newUomClass = AFObject.FindObject(path) as UOMClass;
            Assert.IsNotNull(newUomClass);

        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            instance.Delete(webId);
            StandardPISystem.UOMDatabase.Refresh();          
            string path = Constants.AF_UOM_CLASS_PATH;
            UOMClass newUomClass = AFObject.FindObject(path) as UOMClass;
            Assert.IsNull(newUomClass);
            DeleteSampleDatabaseForTests();
            CreateSampleDatabaseForTests();
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIUnitClass>(response, "response is PIUnitClass");
            Assert.IsTrue(response.Name == Constants.AF_UOM_CLASS_NAME);
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test]
        public void GetByPathTest()
        {
            string path = Constants.AF_UOM_CLASS_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PIUnitClass>(response, "response is PIUnitClass");
            Assert.IsTrue(response.Name == Constants.AF_UOM_CLASS_NAME);
        }

        /// <summary>
        /// Test GetCanonicalUnit
        /// </summary>
        [Test]
        public void GetCanonicalUnitTest()
        {
            string selectedFields = null;
            var response = instance.GetCanonicalUnit(webId, selectedFields);
            Assert.IsInstanceOf<PIUnit>(response, "response is PIUnit");
            Assert.IsTrue(response.Name == Constants.AF_UOM_CLASS_UNIT);
        }

        /// <summary>
        /// Test GetUnits
        /// </summary>
        [Test]
        public void GetUnitsTest()
        {
            string selectedFields = null;
            var response = instance.GetUnits(webId, selectedFields);
            Assert.IsInstanceOf<PIUnit>(response, "response is PIUnit");
            //Assert.IsNotNull(null);
            //Incorrect PIUnit object
            // Assert.IsTrue(unitDTO.Name == response.Name);          
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            PIUnitClass unitClassDTO = instance.Get(webId, null);
            unitClassDTO.Id = null;
            unitClassDTO.WebId = null;
            unitClassDTO.Path = null;
            unitClassDTO.Links = null;
            unitClassDTO.Description = "Updated description";
            instance.Update(webId, unitClassDTO);

            StandardPISystem.UOMDatabase.Refresh();
            string path = Constants.AF_UOM_CLASS_PATH;
            UOMClass newUomClass = AFObject.FindObject(path) as UOMClass;
            if (newUomClass != null)
            {
                Assert.IsTrue(unitClassDTO.Description == newUomClass.Description);
            }
        }

    }

}
