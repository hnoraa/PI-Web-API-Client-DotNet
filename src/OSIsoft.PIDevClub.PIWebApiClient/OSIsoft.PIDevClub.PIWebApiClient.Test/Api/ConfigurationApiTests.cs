// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.Asset;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using System;
using System.Collections.Generic;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing ConfigurationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ConfigurationApiTests
    {
        private IConfigurationApi instance;
        private AFElement configElement;
        private string corsExpHeaders;
        private string corsMethods;
        private int scanSearchInterval;
        private AFAttribute corsMethodsAttribute;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            PIWebApiClient client = PIWebApiClientGenerator.GenerateInstance();
            instance = client.Configuration;
            configElement = AFObject.FindObject(Constants.PIWEBAPI_CONFIGURATION_ELEMENT_PATH) as AFElement;
            corsExpHeaders = configElement.Attributes[Constants.PIWEBAPI_CONFIGURATION_CORSEXPHEADERS].GetValue().Value.ToString();
            corsMethods = configElement.Attributes[Constants.PIWEBAPI_CONFIGURATION_CORSMETHODS].GetValue().Value.ToString();
            scanSearchInterval = configElement.Attributes[Constants.PIWEBAPI_CONFIGURATION_CORSEACHSCANINTERVALS].GetValue().ValueAsInt32();
            corsMethodsAttribute = configElement.Attributes[Constants.PIWEBAPI_CONFIGURATION_CORSMETHODS];
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            configElement.Database.Refresh();
            if (configElement.Attributes[Constants.PIWEBAPI_CONFIGURATION_CORSMETHODS] == null)
            {
                AFAttribute corsMethodsAttr = configElement.Attributes.Add("CorsMethods");
                corsMethodsAttr.Type = typeof(String);
                corsMethodsAttr.SetValue(new AFValue(corsMethods));
        
            }

            configElement.Attributes[Constants.PIWEBAPI_CONFIGURATION_CORSEACHSCANINTERVALS].SetValue(new AFValue(scanSearchInterval));
            configElement.Database.CheckIn(AFCheckedOutMode.ObjectsCheckedOutThisSession);
        }

        /// <summary>
        /// Test an instance of ConfigurationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ConfigurationApi
            Assert.IsInstanceOf(typeof(ConfigurationApi), instance, "instance is a ConfigurationApi");
        }


        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            string key = Constants.PIWEBAPI_CONFIGURATION_CORSMETHODS;
            instance.Delete(key);
            try
            {
                instance.Delete(key);
                Assert.IsTrue(false);
            }
            catch (Exception)
            {

            }
            configElement.Refresh();
            Assert.IsNull(configElement.Attributes[key]);

        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test, Order(1)]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string key = Constants.PIWEBAPI_CONFIGURATION_CORSEXPHEADERS;
            var response = instance.Get(key);
            Assert.IsInstanceOf<Object>(response, "response is Object");
            Assert.IsTrue(corsExpHeaders == response.ToString());
        }

        /// <summary>
        /// Test List
        /// </summary>
        [Test, Order(2)]
        public void ListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            configElement.Refresh();
            var response = instance.List();
            Assert.IsInstanceOf<Dictionary<string, Object>>(response, "response is Dictionary<string, Object>");
           
            Assert.IsTrue(configElement.Attributes.Count == response.Keys.Count);
        }

        /// <summary>
        /// Test Put
        /// </summary>
        [Test]
        public void PutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string key = Constants.PIWEBAPI_CONFIGURATION_CORSEACHSCANINTERVALS;
            //Object value = 190;
            //instance.Put(key, value);
            //configElement.Refresh();
            //int searchInterval = configElement.Attributes[key].GetValue().ValueAsInt32();
            //Assert.IsTrue(searchInterval != scanSearchInterval);
        }

    }

}
