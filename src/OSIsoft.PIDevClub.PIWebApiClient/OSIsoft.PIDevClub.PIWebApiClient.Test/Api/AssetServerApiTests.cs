// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;
using System;
using System.Collections.Generic;
using System.Linq;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing AssetServerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssetServerApiTests : CommonApi
    {
        private IAssetServerApi instance;
        private string webId;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            Cleanup();
            base.CommonInit();
            instance = client.AssetServer;
            base.CreateSampleDatabaseForTests();
            string path = Constants.AF_SERVER_PATH;
            string selectedFields = null;
            webId = instance.GetByPath(path, selectedFields).WebId;

        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        public void CreateMappingAndIdentity()
        {
            StandardPISystem.Refresh();
            var myIdentity = StandardPISystem.SecurityIdentities[Constants.AF_SECURITY_IDENTITY_NAME];
            if (myIdentity == null)
            {
                myIdentity = StandardPISystem.SecurityIdentities.Add(Constants.AF_SECURITY_IDENTITY_NAME);
                myIdentity.Description = "Test User Identity";
            }

            var myMapping = StandardPISystem.SecurityMappings[Constants.AF_SECURITY_MAPPING_NAME];
            if (myMapping == null)
            {
                myMapping = _piSystem.SecurityMappings.Add(Constants.AF_SECURITY_MAPPING_NAME, null, myIdentity);
                myMapping.Description = "Current User Mapping";
            }
            _piSystem.CheckIn();
            StandardPISystem.Refresh();
        }


        public void DeleteMappingAndIdentity()
        {
            StandardPISystem.Refresh();

            var myMapping = StandardPISystem.SecurityMappings[Constants.AF_SECURITY_MAPPING_NAME];
            if (myMapping != null)
            {
                _piSystem.SecurityMappings.Remove(Constants.AF_SECURITY_MAPPING_NAME);

            }

            var myIdentity = StandardPISystem.SecurityIdentities[Constants.AF_SECURITY_IDENTITY_NAME];
            if (myIdentity != null)
            {
                StandardPISystem.SecurityIdentities.Remove(Constants.AF_SECURITY_IDENTITY_NAME);

            }


            _piSystem.CheckIn();

        }

        /// <summary>
        /// Test an instance of AssetServerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(AssetServerApi), instance, "instance is a AssetServerApi");
        }


        /// <summary>
        /// Test CreateAssetDatabase
        /// </summary>
        [Test]
        public void CreateAssetDatabaseTest()
        {
            PIAssetDatabase database = new PIAssetDatabase()
            {
                Name = "TestSwaggerDbbb",
                Description = "PI BI Project Asset Model"
            };
            instance.CreateAssetDatabase(webId, database);
            StandardPISystem.Refresh();
            Assert.IsNotNull(StandardPISystem.Databases[database.Name]);
            StandardPISystem.Databases.Remove(database.Name);

        }

        /// <summary>
        /// Test CreateSecurityEntry
        /// </summary>
        [Test]
        public void CreateSecurityEntryTest()
        {
            DeleteSecurityEntryTest();
            PISecurityEntry securityEntry = new PISecurityEntry();
            securityEntry.SecurityIdentityName = Constants.AF_SECURITY_IDENTITY_NAME;
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin" };
            securityEntry.DenyRights = new List<string>() { "ReadWriteData", "Subscribe", "SubscribeOthers", "Annotate", "None" };
            bool? applyToChildren = null;
            instance.CreateSecurityEntry(webId, securityEntry, applyToChildren, null);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == Constants.AF_SECURITY_IDENTITY_NAME).FirstOrDefault();
            Assert.IsNotNull(secEntry);
        }

        /// <summary>
        /// Test CreateSecurityIdentity
        /// </summary>
        [Test]
        public void CreateSecurityIdentityTest()
        {
            DeleteMappingAndIdentity();
            PISecurityIdentity securityIdentity = new PISecurityIdentity()
            {
                Name = Constants.AF_SECURITY_IDENTITY_NAME
            };
            instance.CreateSecurityIdentity(webId, securityIdentity);

            StandardPISystem.Refresh();
            Assert.IsNotNull(StandardPISystem.SecurityIdentities[securityIdentity.Name]);
            CreateMappingAndIdentity();
        }

        /// <summary>
        /// Test CreateSecurityMapping
        /// </summary>
        [Test]
        public void CreateSecurityMappingTest()
        {
            DeleteMappingAndIdentity();
            PISecurityIdentity securityIdentity = new PISecurityIdentity()
            {
                Name = Constants.AF_SECURITY_IDENTITY_NAME,
                Description = "Test User Identity"
            };
            instance.CreateSecurityIdentity(webId, securityIdentity);

            string securityIdentityWebId = instance.GetSecurityIdentities(webId).Items.Where(a => a.Name == Constants.AF_SECURITY_IDENTITY_NAME).First().WebId;

            PISecurityMapping securityMapping = new PISecurityMapping()
            {
                Name = Constants.AF_SECURITY_MAPPING_NAME,
                Description = "Current User Mapping",
                SecurityIdentityWebId = securityIdentityWebId,
                Account = @"marc\marc.adm"
            };
            instance.CreateSecurityMapping(webId, securityMapping);

            StandardPISystem.Refresh();
            Assert.IsNotNull(StandardPISystem.SecurityMappings[securityMapping.Name]);
            CreateMappingAndIdentity();

        }

        /// <summary>
        /// Test CreateUnitClass
        /// </summary>
        [Test]
        public void CreateUnitClassTest()
        {
            PIUnitClass unitClass = new PIUnitClass(null, null, "SwaggerUnit", "Old description", "Swaglers", "swg", null, null);
            instance.CreateUnitClass(webId, unitClass);

            StandardPISystem.Refresh();
            Assert.IsNotNull(StandardPISystem.UOMDatabase.UOMClasses[unitClass.Name]);
            StandardPISystem.UOMDatabase.UOMClasses.Remove(unitClass.Name);

        }

        /// <summary>
        /// Test DeleteSecurityEntry
        /// </summary>
        [Test]
        public void DeleteSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            string securityItem = null;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            bool? applyToChildren = null;

            instance.DeleteSecurityEntry(webId: webId, name: name, applyToChildren: applyToChildren, securityItem: securityItem);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == name).FirstOrDefault();
            Assert.IsNull(secEntry);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIAssetServer>(response, "response is PIAssetServer");
            Assert.IsTrue(response.Name == Constants.AF_SERVER_NAME);
        }

        /// <summary>
        /// Test GetAnalysisRulePlugIns
        /// </summary>
        [Test]
        public void GetAnalysisRulePlugInsTest()
        {
            string selectedFields = null;
            var response = instance.GetAnalysisRulePlugIns(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsAnalysisRulePlugIn>(response, "response is PIItemsPlugIn");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetByName
        /// </summary>
        [Test]
        public void GetByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string name = Constants.AF_SERVER_NAME;
            string selectedFields = null;
            var response = instance.GetByName(name, selectedFields);
            Assert.IsInstanceOf<PIAssetServer>(response, "response is PIAssetServer");
            Assert.IsTrue(response.Name == Constants.AF_SERVER_NAME);
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test]
        public void GetByPathTest()
        {
            string path = Constants.AF_SERVER_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PIAssetServer>(response, "response is PIAssetServer");
            Assert.IsTrue(response.Name == Constants.AF_SERVER_NAME);
        }

        /// <summary>
        /// Test GetDatabases
        /// </summary>
        [Test]
        public void GetDatabasesTest()
        {
            string selectedFields = null;
            var response = instance.GetDatabases(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsAssetDatabase>(response, "response is PIItemsAssetDatabase");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurity
        /// </summary>
        [Test]
        public void GetSecurityTest()
        {
            List<string> userIdentity = new List<string>() { @"marc\marc.adm", @"marc\marc.user" };
            List<string> securityItem = new List<string>() { "Default" };
            bool? forceRefresh = null;
            string selectedFields = null;
            var response = instance.GetSecurity(webId, securityItem, userIdentity, forceRefresh, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityRights>(response, "response is PIItemsSecurityRights");
            Assert.IsTrue(response.Items.Count > 0);
        }



        /// <summary>
        /// Test GetSecurityEntries
        /// </summary>
        [Test]
        public void GetSecurityEntriesTest()
        {
            string nameFilter = null;
            string selectedFields = null;
            var response = instance.GetSecurityEntries(webId, null, nameFilter, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityEntry>(response, "response is PIItemsSecurityEntry");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurityEntryByName
        /// </summary>
        [Test]
        public void GetSecurityEntryByNameTest()
        {
            string name = "Administrators";
            string selectedFields = null;
            var response = instance.GetSecurityEntryByName(webId: webId, name: name, securityItem: null, selectedFields: selectedFields);
            Assert.IsInstanceOf<PISecurityEntry>(response, "response is PISecurityEntry");
            Assert.IsTrue(response.Name == name);

        }

        /// <summary>
        /// Test GetSecurityIdentities
        /// </summary>
        [Test]
        public void GetSecurityIdentitiesTest()
        {
            string query = null;
            string field = null;
            string sortField = null;
            string sortOrder = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetSecurityIdentities(webId, field, maxCount, query, selectedFields, sortField, sortOrder);
            Assert.IsInstanceOf<PIItemsSecurityIdentity>(response, "response is PIItemsSecurityIdentity");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurityIdentitiesForUser
        /// </summary>
        [Test]
        public void GetSecurityIdentitiesForUserTest()
        {
            string userIdentity = @"marc\marc.adm";
            string selectedFields = null;
            var response = instance.GetSecurityIdentitiesForUser(webId, userIdentity, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityIdentity>(response, "response is PIItemsSecurityIdentity");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurityMappings
        /// </summary>
        [Test]
        public void GetSecurityMappingsTest()
        {
            string query = null;
            string field = null;
            string sortField = null;
            string sortOrder = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetSecurityMappings(webId, field, maxCount, query, selectedFields, sortField, sortOrder);
            Assert.IsInstanceOf<PIItemsSecurityMapping>(response, "response is PIItemsSecurityMapping");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetTimeRulePlugIns
        /// </summary>
        [Test]
        public void GetTimeRulePlugInsTest()
        {
            string selectedFields = null;
            var response = instance.GetTimeRulePlugIns(webId: webId, selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsTimeRulePlugIn>(response, "response is PIItemsPlugIn");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetUnitClasses
        /// </summary>
        [Test]
        public void GetUnitClassesTest()
        {
            string selectedFields = null;
            var response = instance.GetUnitClasses(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsUnitClass>(response, "response is PIItemsUnitClass");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test List
        /// </summary>
        [Test]
        public void ListTest()
        {
            string selectedFields = null;
            var response = instance.List(selectedFields);
            Assert.IsInstanceOf<PIItemsAssetServer>(response, "response is PIItemsAssetServer");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test UpdateSecurityEntry
        /// </summary>
        [Test]
        public void UpdateSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin", "Subscribe", "ReadWriteData" };
            securityEntry.DenyRights = new List<string>() { "SubscribeOthers", "Annotate", "None" };
            securityEntry.Name = null;
            securityEntry.Links = null;
            securityEntry.SecurityIdentityName = null;
            bool? applyToChildren = null;
            instance.UpdateSecurityEntry(webId: webId, name: name, securityEntry: securityEntry, applyToChildren : applyToChildren, securityItem: null);

            PISecurityEntry securityEntryUpdated = instance.GetSecurityEntryByName(webId: webId, name: name);
            Assert.IsTrue(securityEntry.AllowRights.Count == securityEntryUpdated.AllowRights.Count);

        }

    }

}
