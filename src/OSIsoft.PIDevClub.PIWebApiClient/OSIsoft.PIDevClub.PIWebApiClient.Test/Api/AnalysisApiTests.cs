// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.Analysis;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;
using System;
using System.Collections.Generic;
using System.Linq;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing AnalysisApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AnalysisApiTests : CommonApi
    {
        private IAnalysisApi instance;
        private string webId;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.Analysis;
            base.CreateSampleDatabaseForTests();

            string path = Constants.AF_ANALYSIS_PATH;
            string selectedFields = null;
            webId = instance.GetByPath(path, selectedFields).WebId;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of AnalysisApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AnalysisApi
            Assert.IsInstanceOf(typeof(AnalysisApi), instance, "instance is a AnalysisApi");
        }


        /// <summary>
        /// Test CreateSecurityEntry
        /// </summary>
        [Test, Order(1)]
        public void CreateSecurityEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            PISecurityEntry securityEntry = new PISecurityEntry();
            securityEntry.SecurityIdentityName = Constants.AF_SECURITY_IDENTITY_NAME;
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin" };
            securityEntry.DenyRights = new List<string>() { "ReadWriteData", "Subscribe", "SubscribeOthers", "Annotate", "None" };
            bool? applyToChildren = null;
            instance.CreateSecurityEntry(webId, securityEntry, applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == Constants.AF_SECURITY_IDENTITY_NAME).FirstOrDefault();
            Assert.IsNotNull(secEntry);
            //         Assert.IsTrue(instance.GetSecurityEntries(webId).Items.Count == 5);



        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            instance.Delete(webId);
            AFAnalysis analysis = AFObject.FindObject(Constants.AF_ANALYSIS_PATH) as AFAnalysis;
            Assert.IsNull(analysis);
            DeleteSampleDatabaseForTests();
            CreateSampleDatabaseForTests();
        }

        /// <summary>
        /// Test DeleteSecurityEntry
        /// </summary>
        [Test, Order(3)]
        public void DeleteSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            bool? applyToChildren = null;
            instance.DeleteSecurityEntry(webId: webId, name: name, applyToChildren: applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == name).FirstOrDefault();
            Assert.IsNull(secEntry);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIAnalysis>(response, "response is PIAnalysis");
            Assert.IsTrue(response.Name == Constants.AF_ANALYSIS_NAME);
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test]
        public void GetByPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string path = Constants.AF_ANALYSIS_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PIAnalysis>(response, "response is PIAnalysis");
            Assert.IsTrue(response.Name == Constants.AF_ANALYSIS_NAME);
        }

        /// <summary>
        /// Test GetCategories
        /// </summary>
        [Test]
        public void GetCategoriesTest()
        {
            string selectedFields = null;
            var response = instance.GetCategories(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsAnalysisCategory>(response, "response is PIItemsCategory");
            Assert.IsTrue(response.Items.Count == 2);
        }

        /// <summary>
        /// Test GetSecurity
        /// </summary>
        [Test]
        public void GetSecurityTest()
        {
            List<string> userIdentity = new List<string>() { "MARC\\marc.adm", "MARC\\marc.user" };
            bool? forceRefresh = true;
            string selectedFields = null;
            var response = instance.GetSecurity(webId, userIdentity, forceRefresh, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityRights>(response, "response is PIItemsSecurityRights");
        }

        /// <summary>
        /// Test GetSecurityEntries
        /// </summary>
        [Test, Order(3)]
        public void GetSecurityEntriesTest()
        {
            string nameFilter = null;
            string selectedFields = null;
            var response = instance.GetSecurityEntries(webId, nameFilter, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityEntry>(response, "response is PIItemsSecurityEntry");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurityEntryByName
        /// </summary>
        [Test, Order(2)]
        public void GetSecurityEntryByNameTest()
        {
            CreateSecurityEntryTest();
            // TODO uncomment below to test the method and replace null with proper value
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            string selectedFields = null;
            var response = instance.GetSecurityEntryByName(webId: webId, name: name, selectedFields: selectedFields);
            Assert.IsInstanceOf<PISecurityEntry>(response, "response is PISecurityEntry");
            Assert.IsTrue(response.Name == name);
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            string path = Constants.AF_ANALYSIS_PATH;
            PIAnalysis analysis = instance.Get(webId, null);
            analysis.WebId = null;
            analysis.Id = null;
            analysis.Links = null;
            analysis.Path = null;
            analysis.AutoCreated = null;
            analysis.HasTemplate = null;
            analysis.HasNotification = null;
            analysis.HasTarget = null;
            analysis.IsConfigured = null;
            analysis.Description = "This is the new analysis swagger description";
            analysis.IsTimeRuleDefinedByTemplate = null;
            instance.Update(webId, analysis);

            StandardPISystem.Refresh();
            AFAnalysis myAnalysis = AFObject.FindObject(path) as AFAnalysis;
            if (analysis != null)
            {
                Assert.IsTrue(myAnalysis.Description == analysis.Description);
            }
        }

        /// <summary>
        /// Test UpdateSecurityEntry
        /// </summary>
        [Test, Order(2)]
        public void UpdateSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PISecurityEntry securityEntry = null;
            try
            {
                securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            }
            catch (Exception)
            {
                if (securityEntry == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            securityEntry = instance.GetSecurityEntryByName(webId: webId, name: name);
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin", "Subscribe", "ReadWriteData" };
            securityEntry.DenyRights = new List<string>() { "SubscribeOthers", "Annotate", "None" };
            securityEntry.Name = null;
            securityEntry.Links = null;
            securityEntry.SecurityIdentityName = null;
            bool? applyToChildren = null;
            instance.UpdateSecurityEntry(webId: webId, name: name, securityEntry: securityEntry, applyToChildren: applyToChildren);

            PISecurityEntry securityEntryUpdated = instance.GetSecurityEntryByName(webId: webId, name: name);
            Assert.IsTrue(securityEntry.AllowRights.Count == securityEntryUpdated.AllowRights.Count);

        }

    }

}
