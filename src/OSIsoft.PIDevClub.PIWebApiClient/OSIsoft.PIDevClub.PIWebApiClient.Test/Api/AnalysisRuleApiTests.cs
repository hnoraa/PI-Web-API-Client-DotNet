// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.Analysis;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing AnalysisRuleApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AnalysisRuleApiTests : CommonApi
    {
        private IAnalysisRuleApi instance;
        private string webId;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.AnalysisRule;
            base.CreateSampleDatabaseForTests();

            string path = Constants.AF_ANALYSIS_RULE_PATH;
            string selectedFields = null;
            webId = instance.GetByPath(path, selectedFields).WebId;


        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of AnalysisRuleApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AnalysisRuleApi
            Assert.IsInstanceOf(typeof(AnalysisRuleApi), instance, "instance is a AnalysisRuleApi");
        }


        /// <summary>
        /// Test CreateAnalysisRule
        /// </summary>
        [Test]
        public void CreateAnalysisRuleTest()
        {
            PIAnalysisRule analysisRule = new PIAnalysisRule();
            analysisRule.ConfigString = "a := TagVal('sinusoid'); b := Pow(a, 2); c := a + b;";
            analysisRule.PlugInName = "PerformanceEquation";
            analysisRule.VariableMapping = "b||Attribute1;c||Attribute2";
            instance.CreateAnalysisRule(webId, analysisRule);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            instance.Delete(webId);
            StandardPISystem.Refresh();
            string path = Constants.AF_ANALYSIS_RULE_PATH;
            AFAnalysisRule myAnalysisRule = AFObject.FindObject(path) as AFAnalysisRule;
            Assert.IsNull(myAnalysisRule);
        }




        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIAnalysisRule>(response, "response is PIAnalysisRule");
        }

        /// <summary>
        /// Test GetAnalysisRules
        /// </summary>
        [Test]
        public void GetAnalysisRulesTest()
        {

            string nameFilter = null;
            bool? searchFullHierarchy = null;
            string sortField = null;
            string sortOrder = null;
            int? startIndex = null;
            int? maxCount = null;
            string selectedFields = null;
            var response = instance.GetAnalysisRules(webId, maxCount, nameFilter, searchFullHierarchy, selectedFields, sortField, sortOrder, startIndex);
            Assert.IsInstanceOf<PIItemsAnalysisRule>(response, "response is PIItemsAnalysisRule");
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test]
        public void GetByPathTest()
        {
            string path = Constants.AF_ANALYSIS_RULE_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PIAnalysisRule>(response, "response is PIAnalysisRule");
            Assert.IsNotNull(response.WebId);
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            string path = Constants.AF_ANALYSIS_RULE_PATH;
            AFAnalysisRule myAnalysisRule = AFObject.FindObject(path) as AFAnalysisRule;
            string oldConfigString = myAnalysisRule.ConfigString;



            PIAnalysisRule analysisRule = instance.GetByPath(path, null);
            analysisRule.Name = null;
            analysisRule.Description = null;
            analysisRule.DisplayString = null;
            analysisRule.EditorType = null;
            analysisRule.HasChildren = null;
            analysisRule.PlugInName = null;
            analysisRule.SupportedBehaviors = null;
            analysisRule.Path = null;
            analysisRule.IsConfigured = null;
            analysisRule.IsInitializing = null;
            analysisRule.WebId = null;
            analysisRule.Links = null;
            analysisRule.Id = null;
            analysisRule.ConfigString = "Avg2d := TagAvg('Temperature','*-4d','*');\r\nAvg1d := TagAvg('Temperature','*-3d','*');\r\nSumAvg := Avg1d+Avg2d+2;";
            instance.Update(webId, analysisRule);


            //StandardPISystem.Databases[Constants.AF_DATABASE_NAME].Refresh();

            myAnalysisRule.RefreshConfigurationAndVariableMapping();
            Assert.IsFalse(oldConfigString == analysisRule.ConfigString);

        }

    }

}
