// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.Asset;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;
using System;
using System.Collections.Generic;
using System.Linq;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing ElementTemplateApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ElementTemplateApiTests : CommonApi
    {
        private IElementTemplateApi instance;
        private string webId;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.ElementTemplate;
            base.CreateSampleDatabaseForTests();

            string path = Constants.AF_ELEMENT_TEMPLATE_PATH;
            string selectedFields = null;
            webId = instance.GetByPath(path, selectedFields).WebId;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of ElementTemplateApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ElementTemplateApi
            Assert.IsInstanceOf(typeof(ElementTemplateApi), instance, "instance is a ElementTemplateApi");
        }


        /// <summary>
        /// Test CreateAttributeTemplate
        /// </summary>
        [Test]
        public void CreateAttributeTemplateTest()
        {

            PIAttributeTemplate attributeTemplate = new PIAttributeTemplate()
            {
                Name = "TableAttributeTemplate",
                Description = "2008 Water Use",
                Type = "Int32",
                TypeQualifier = "",
                DefaultValue = 0,
                DataReferencePlugIn = "Table Lookup",
                ConfigString = "SELECT [Water Use] FROM [Energy Use 2008] WHERE [Asset ID] = '%Element%'",
                IsConfigurationItem = false,
                IsExcluded = false,
                IsHidden = false,
                IsManualDataEntry = false,
            };
            string path = Constants.AF_ELEMENT_TEMPLATE_PATH;
            instance.CreateAttributeTemplate(webId, attributeTemplate);
            AFElementTemplate myTemplate = AFObject.FindObject(path) as AFElementTemplate;
            myTemplate.Refresh();
            Assert.IsNotNull(myTemplate.AttributeTemplates[attributeTemplate.Name]);
        }

        /// <summary>
        /// Test CreateSecurityEntry
        /// </summary>
        [Test, Order(1)]
        public void CreateSecurityEntryTest()
        {
            PISecurityEntry securityEntry = new PISecurityEntry();
            securityEntry.SecurityIdentityName = Constants.AF_SECURITY_IDENTITY_NAME;
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin" };
            securityEntry.DenyRights = new List<string>() { "ReadWriteData", "Subscribe", "SubscribeOthers", "Annotate", "None" };
            bool? applyToChildren = null;
            instance.CreateSecurityEntry(webId, securityEntry, applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == Constants.AF_SECURITY_IDENTITY_NAME).FirstOrDefault();
            Assert.IsNotNull(secEntry);
        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            instance.Delete(webId);
            AFDatabase db = StandardPISystem.Databases[Constants.AF_DATABASE_NAME];
            db.Refresh();
            AFElementTemplate elTemplate = AFObject.FindObject(Constants.AF_ELEMENT_TEMPLATE_PATH) as AFElementTemplate;
            Assert.IsNull(elTemplate);
            DeleteSampleDatabaseForTests();
            CreateSampleDatabaseForTests();
        }

        /// <summary>
        /// Test DeleteSecurityEntry
        /// </summary>
        [Test, Order(4)]
        public void DeleteSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PIItemsSecurityEntry securityEntryItems = null;
            try
            {
                securityEntryItems = instance.GetSecurityEntryByName(name, webId, null);
            }
            catch (Exception)
            {
                if (securityEntryItems == null)
                {
                    CreateSecurityEntryTest();
                }
            }
            bool? applyToChildren = null;
            instance.DeleteSecurityEntry(webId: webId, name: name, applyToChildren: applyToChildren);
            var secEntry = instance.GetSecurityEntries(webId).Items.Where(m => m.Name == name).FirstOrDefault();
            Assert.IsNull(secEntry);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {

            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIElementTemplate>(response, "response is PIElementTemplate");
        }

        /// <summary>
        /// Test GetAnalysisTemplates
        /// </summary>
        [Test]
        public void GetAnalysisTemplatesTest()
        {
            string selectedFields = null;
            var response = instance.GetAnalysisTemplates(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsAnalysisTemplate>(response, "response is PIItemsAnalysisTemplate");
        }

        /// <summary>
        /// Test GetAttributeTemplates
        /// </summary>
        [Test]
        public void GetAttributeTemplatesTest()
        {
            bool? showInherited = null;
            string selectedFields = null;
            var response = instance.GetAttributeTemplates(webId, selectedFields, showInherited);
            Assert.IsInstanceOf<PIItemsAttributeTemplate>(response, "response is PIItemsAttributeTemplate");
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test]
        public void GetByPathTest()
        {
            string path = Constants.AF_ELEMENT_TEMPLATE_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PIElementTemplate>(response, "response is PIElementTemplate");
        }

        /// <summary>
        /// Test GetCategories
        /// </summary>
        [Test]
        public void GetCategoriesTest()
        {
            bool? showInherited = null;
            string selectedFields = null;
            var response = instance.GetCategories(webId, selectedFields, showInherited);
            Assert.IsInstanceOf<PIItemsElementCategory>(response, "response is PIItemsCategory");
        }

        /// <summary>
        /// Test GetSecurity
        /// </summary>
        [Test]
        public void GetSecurityTest()
        {
            List<string> userIdentity = new List<string>() { @"marc\marc.adm", @"marc\marc.user" };
            bool? forceRefresh = null;
            string selectedFields = null;
            var response = instance.GetSecurity(webId, userIdentity, forceRefresh, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityRights>(response, "response is PIItemsSecurityRights");
        }

        /// <summary>
        /// Test GetSecurityEntries
        /// </summary>

        [Test]
        public void GetSecurityEntriesTest()
        {
            string nameFilter = null;
            string selectedFields = null;
            var response = instance.GetSecurityEntries(webId, nameFilter, selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityEntry>(response, "response is PIItemsSecurityEntry");
            Assert.IsTrue(response.Items.Count > 0);
        }

        [Test]
        public void GetSecurityEntriesTest1()
        {
            string selectedFields = null;
            var response = instance.GetSecurityEntries(webId, "Administrators", selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityEntry>(response, "response is PIItemsSecurityEntry");
            Assert.IsTrue(response.Items.Count > 0);
        }

        /// <summary>
        /// Test GetSecurityEntryByName
        /// //Fixed
        /// </summary>
        [Test, Order(3)]
        public void GetSecurityEntryByNameTest()
        {
            string name = "Administrators";
            string selectedFields = null;
            var response = instance.GetSecurityEntryByName(webId: webId, name: name, selectedFields: selectedFields);
            Assert.IsInstanceOf<PIItemsSecurityEntry>(response, "response is PIItemsSecurityEntry");
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            string path = Constants.AF_ELEMENT_TEMPLATE_PATH;
            PIElementTemplate template = instance.GetByPath(path, null);
            template.Id = null;
            template.Description = "New attribute category description";
            template.Links = null;
            template.Path = null;
            template.WebId = null;
            instance.Update(webId, template);

            AFElementTemplate myTemplate = AFObject.FindObject(path) as AFElementTemplate;
            myTemplate.Refresh();
            if (myTemplate != null)
            {
                Assert.IsTrue(myTemplate.Description == template.Description);
            }
        }

        /// <summary>
        /// Test UpdateSecurityEntry
        /// </summary>
        [Test, Order(2)]
        public void UpdateSecurityEntryTest()
        {
            string name = Constants.AF_SECURITY_IDENTITY_NAME;
            PIItemsSecurityEntry securityEntries = null;
            securityEntries = instance.GetSecurityEntries(webId, name, null);
            if ((securityEntries == null) || (securityEntries.Items.Count == 0))
            {
                CreateSecurityEntryTest();
                securityEntries = instance.GetSecurityEntries(webId, name, null);
            }

            PISecurityEntry securityEntry = securityEntries.Items.First();
            securityEntry.AllowRights = new List<string>() { "ReadWrite", "Delete", "Execute", "Admin", "Subscribe", "ReadWriteData" };
            securityEntry.DenyRights = new List<string>() { "SubscribeOthers", "Annotate", "None" };
            securityEntry.Name = null;
            securityEntry.Links = null;
            securityEntry.SecurityIdentityName = null;
            bool? applyToChildren = null;
            instance.UpdateSecurityEntry(webId: webId, name: name, securityEntry: securityEntry, applyToChildren: applyToChildren);

            PIItemsSecurityEntry securityEntries2 = instance.GetSecurityEntries(webId, name, null);
            Assert.IsTrue(securityEntry.AllowRights.Count == securityEntries2.Items.First().AllowRights.Count);
        }

    }

}
