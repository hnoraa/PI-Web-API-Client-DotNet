// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.UnitsOfMeasure;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing UnitApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UnitApiTests : CommonApi
    {
        private IUnitApi instance;
        private string webId;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.Unit;
            CreateSampleDatabaseForTests();
            string path = Constants.AF_UOM_PATH;
            string selectedFields = null;
            webId = instance.GetByPath(path, selectedFields).WebId;


        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of UnitApi
        /// </summary>
        [Test, Order(1)]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UnitApi
            Assert.IsInstanceOf(typeof(UnitApi), instance, "instance is a UnitApi");
        }


        /// <summary>
        /// Test Delete
        /// </summary>
        [Test, Order(5)]
        public void DeleteTest()
        {
            StandardPISystem.UOMDatabase.Refresh();
            string path = Constants.AF_UOM_PATH;
            UOM uom1 = AFObject.FindObject(path) as UOM;
            Assert.IsNotNull(uom1);

            instance.Delete(webId);
            StandardPISystem.UOMDatabase.Refresh();
        
            UOM uom = AFObject.FindObject(path) as UOM;
            Assert.IsNull(uom);
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test, Order(1)]
        public void GetTest()
        {
            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIUnit>(response, "response is PIUnit");
            Assert.IsTrue(response.Name == Constants.AF_UOM_NAME);
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test, Order(2)]
        public void GetByPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string path = Constants.AF_UOM_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsTrue(response.Name == Constants.AF_UOM_NAME);
            Assert.IsInstanceOf<PIUnit>(response, "response is PIUnit");
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test, Order(4)]
        public void UpdateTest()
        {
            PIUnit unitDTO = instance.Get(webId, null);
            unitDTO.WebId = null;
            unitDTO.Id = null;
            unitDTO.Factor = null;
            unitDTO.Path = null;
            unitDTO.Offset = null;
            unitDTO.Links = null;
            unitDTO.Description = "Updated description";
            instance.Update(webId, unitDTO);

            StandardPISystem.UOMDatabase.Refresh();
            string path = Constants.AF_UOM_PATH;
            UOM newUom = AFObject.FindObject(path) as UOM;
    
            if (newUom != null)
            {
                Assert.IsTrue(unitDTO.Description == newUom.Description);
            }
        }

    }

}
