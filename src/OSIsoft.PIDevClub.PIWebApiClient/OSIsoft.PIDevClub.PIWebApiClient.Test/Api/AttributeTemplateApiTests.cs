// ************************************************************************
//
// * Copyright 2017 OSIsoft, LLC
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// * You may obtain a copy of the License at
// * 
// *   <http://www.apache.org/licenses/LICENSE-2.0>
// * 
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
// ************************************************************************

using NUnit.Framework;
using OSIsoft.AF;
using OSIsoft.AF.Asset;
using OSIsoft.PIDevClub.PIWebApiClient.Api;
using OSIsoft.PIDevClub.PIWebApiClient.Model;

namespace OSIsoft.PIDevClub.PIWebApiClient.Test
{
    /// <summary>
    ///  Class for testing AttributeTemplateApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AttributeTemplateApiTests : CommonApi
    {
        private IAttributeTemplateApi instance;
        private string webId;
        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            base.CommonInit();
            instance = client.AttributeTemplate;
            base.CreateSampleDatabaseForTests();

            string path = Constants.AF_ATTRIBUTE_TEMPLATE_PATH;
            string selectedFields = null;
            webId = instance.GetByPath(path, selectedFields).WebId;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            base.DeleteSampleDatabaseForTests();
        }

        /// <summary>
        /// Test an instance of AttributeTemplateApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {

            Assert.IsInstanceOf(typeof(AttributeTemplateApi), instance, "instance is a AttributeTemplateApi");
        }


        /// <summary>
        /// Test CreateAttributeTemplate
        /// </summary>
        [Test]
        public void CreateAttributeTemplateTest()
        {
            string path = Constants.AF_ATTRIBUTE_TEMPLATE_PATH;
            PIAttributeTemplate template = new PIAttributeTemplate()
            {
                Name = "Water(2008)",
                Description = "2008 Water Use",
                Type = "Int32",
                TypeQualifier = "",
                DefaultValue = 0,
                DataReferencePlugIn = "Table Lookup",
                ConfigString = "SELECT [Water Use] FROM [Energy Use 2008] WHERE [Asset ID] = '%Element%'",
                IsConfigurationItem = false,
                IsExcluded = false,
                IsHidden = false,
                IsManualDataEntry = false,
                TraitName = "LimitLoLo"
            };

            instance.CreateAttributeTemplate(webId, template);
            AFAttributeTemplate myAttributeTemplate = AFObject.FindObject(path) as AFAttributeTemplate;
            myAttributeTemplate.ElementTemplate.Refresh();
            Assert.IsTrue(myAttributeTemplate.AttributeTemplates.Count == 4);

        }

        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            instance.Delete(webId);
            AFDatabase db = StandardPISystem.Databases[Constants.AF_DATABASE_NAME];
            db.Refresh();
            AFAttributeTemplate attributeTemplate = AFObject.FindObject(Constants.AF_ATTRIBUTE_TEMPLATE_PATH) as AFAttributeTemplate;
            Assert.IsNull(attributeTemplate);
            DeleteSampleDatabaseForTests();
            CreateSampleDatabaseForTests();
        }

        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            string selectedFields = null;
            var response = instance.Get(webId, selectedFields);
            Assert.IsInstanceOf<PIAttributeTemplate>(response, "response is PIAttributeTemplate");
        }

        /// <summary>
        /// Test GetAttributeTemplates
        /// </summary>
        [Test]
        public void GetAttributeTemplatesTest()
        {

            string selectedFields = null;
            var response = instance.GetAttributeTemplates(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsAttributeTemplate>(response, "response is PIItemsAttributeTemplate");
        }

        /// <summary>
        /// Test GetByPath
        /// </summary>
        [Test]
        public void GetByPathTest()
        {

            string path = Constants.AF_ATTRIBUTE_TEMPLATE_PATH;
            string selectedFields = null;
            var response = instance.GetByPath(path, selectedFields);
            Assert.IsInstanceOf<PIAttributeTemplate>(response, "response is PIAttributeTemplate");
        }

        /// <summary>
        /// Test GetCategories
        /// </summary>
        [Test]
        public void GetCategoriesTest()
        {
            string selectedFields = null;
            var response = instance.GetCategories(webId, selectedFields);
            Assert.IsInstanceOf<PIItemsAttributeCategory>(response, "response is PIItemsCategory");
        }

        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {

            string path = Constants.AF_ATTRIBUTE_TEMPLATE_PATH;
            PIAttributeTemplate template = instance.Get(webId, null);
            template.WebId = null;
            template.Id = null;
            template.Links = null;
            template.Path = null;
            template.HasChildren = null;
            template.Description = "This is the new attribute template swagger description";
            instance.Update(webId, template);

            StandardPISystem.Refresh();
            AFAttributeTemplate myAttributeTemplate = AFObject.FindObject(path) as AFAttributeTemplate;
            myAttributeTemplate.ElementTemplate.Refresh();
            myAttributeTemplate = AFObject.FindObject(path) as AFAttributeTemplate;

            if (myAttributeTemplate != null)
            {
                Assert.IsTrue(myAttributeTemplate.Description == template.Description);
            }

        }

    }

}
